{"version":3,"sources":["../node_modules/@ion-phaser/core/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","components/Footer/footer.js","components/Modal/index.js","utils/API.js","components/auth/LoginPage.js","components/Save/SaveMenu.js","phaser/boot.js","phaser/prefabs/unit.js","phaser/prefabs/playercharacter.js","phaser/prefabs/enemy.js","phaser/battle.js","phaser/prefabs/menuitem.js","phaser/prefabs/menu.js","phaser/prefabs/heroesmenu.js","phaser/prefabs/enemiesmenu.js","phaser/prefabs/actionsmenu.js","phaser/prefabs/message.js","phaser/ui.js","phaser/prefabs/doormodal.js","phaser/worldmap.js","phaser/desert.js","phaser/forest.js","phaser/cave.js","phaser/city.js","App.js","index.js","assets/RPG_assets.png","assets/creatures/capturecreatures/AutomatonBase.png","assets/creatures/capturecreatures/ToxicRoot.png","assets/images/battle_backgrounds/desert.jpg","assets/worldmap/tilesheets/castle4.png","assets/worldmap/tilesheets/Dungeon_A532.png","assets/worldmap/tilesheets/wateranimate2.png","assets/worldmap/tilesheets/Forest.png","assets/worldmap/tilesheets/nature2.png","assets/worldmap/tilesheets/World_C32.png","assets/worldmap/tilesheets/WorldIcons.png","assets/images/buttons/buttonsyes.png","assets/images/buttons/buttonsno.png","assets/desert/tilesheets/rocks.png","assets/desert/tilesheets/Outside_A2.png","assets/desert/tilesheets/red_cave.png","assets/desert/tilesheets/planks.png","assets/desert/tilesheets/miscshop_bridge.png","assets/desert/tilesheets/bones.png","assets/desert/tilesheets/sekihi01.png","assets/forest/tilesheets/d6qnbs4-c4ff2415-2303-4298-98c8-21f24187b9eb.png","assets/forest/tilesheets/d9xkdpm-a3f22a0a-77e9-4aa5-999c-53bab01d0fa4.png","assets/forest/tilesheets/dapf6nc-562c87b7-1de8-45c2-979f-18e7aa8b98ad.png","assets/forest/tilesheets/graves-shadow_1.png","assets/forest/tilesheets/mv_trees_by_schwarzenacht-dazcdmq-1.png","assets/forest/tilesheets/pandamaru_mv_nature1_by_schwarzenacht-d9k7n23.png","assets/forest/tilesheets/rpg_maker__grass__flowers_and_windows_tileset_by_xxjapozeroxx-dbpxkvy.png","assets/cave/tilesheets/All.png","assets/cave/tilesheets/cave_tileset.png","assets/cave/tilesheets/cave2.png","assets/cave/tilesheets/crystals.png","assets/cave/tilesheets/TileA5.png","assets/cave/tilesheets/wateranimate2.png","assets/city/tilesheets/bldg.png","assets/city/tilesheets/CyberTileA4.png","assets/city/tilesheets/industrial.png","assets/city/tilesheets/carsetc.png","assets/city/tilesheets/signs.png","assets/city/tilesheets/JGSDF_garage.png","assets/city/tilesheets/Houses_Slum.png","assets/city/tilesheets/wreckage.png","assets/city/tilesheets/bike.png","assets/city/tilesheets/blood_wall02.png","assets/city/tilesheets/chars_city.png"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Footer","Card","className","Body","Title","Text","Modal","handleClose","show","children","showHideClassName","href","onClick","playerId","axios","get","post","LoginPage","React","Component","constructor","super","loadPlayer","API","res","console","log","data","length","this","newPlayer","playerLogin","catch","err","state","user","widget","OktaSignIn","baseUrl","clientId","redirectUri","authParams","issuer","responseType","display","features","registration","showLogin","bind","logout","componentDidMount","session","response","status","setState","login","userId","Backbone","history","stop","renderEl","el","loginContainer","claims","email","signOut","modalOpen","modal","modalClose","playerObj","props","handler","render","Button","variant","ref","div","SaveMenu","useState","setShow","onHide","animation","Header","closeButton","BootScene","Phaser","Class","Extends","Scene","initialize","call","key","preload","load","image","dragonB","dragonO","spritesheet","charSprites","frameWidth","frameHeight","tilemapTiledJSON","worldTileMap","desertTileMap","cityTileMap","caveTileMap","forestTileMap","create","scene","start","Unit","GameObjects","Sprite","x","y","texture","frame","type","hp","damage","maxHp","living","menuItem","setMenuItem","item","attack","target","takeDamage","events","emit","unitKilled","visible","PlayerCharacter","flipX","setScale","Enemy","BattleScene","desertBG","cameras","main","setBounds","physics","world","add","setOrigin","startBattle","sys","on","warrior","existing","dragonblue","dragonOrange","heroes","enemies","units","concat","index","run","nextTurn","checkEndBattle","endBattle","r","Math","floor","random","time","addEvent","delay","callback","callbackScope","victory","i","gameOver","receivePlayerSelection","action","destroy","sleep","switch","MenuItem","text","color","align","fontSize","select","setColor","deselect","active","Menu","Container","menuItems","menuItemIndex","selected","addMenuItem","unit","push","moveSelectionUp","moveSelectionDown","confirm","clear","remap","HeroesMenu","EnemiesMenu","ActionsMenu","Message","graphics","lineStyle","fillStyle","strokeRect","fillRect","wordWrap","width","useAdvancedWrap","showMessage","setText","hideEvent","remove","hideMessage","UIScene","menus","container","heroesMenu","actionsMenu","enemiesMenu","currentMenu","battleScene","input","keyboard","onKeyInput","onPlayerSelect","onSelectedAction","onEnemy","createMenu","message","remapHeroes","remapEnemies","event","DoorModal","init","parentScene","name","buttonYes","buttonNo","toScene","duration","tweens","targets","alpha","Geom","Rectangle","height","fillRectShape","modalPanel","Display","Align","In","Center","zone","closeBtn","displayWidth","displayHeight","setInteractive","useHandCursor","pointer","yesBtn","buttonLabel","fontFamily","fontStyle","bringToTop","staggeredShow","update","WorldScene","landBaseOne","landBaseTwo","water","forest","nature","worldOne","worldTwo","make","tilemap","landOneTiles","addTilesetImage","landTwoTiles","waterTiles","forestTiles","natureTiles","worldOneTiles","worldTwoTiles","overtile","createStaticLayer","overtileTwo","collider","setCollisionByExclusion","setDepth","anims","frames","generateFrameNumbers","frameRate","repeat","player","sprite","bounds","widthInPixels","heightInPixels","setCollideWorldBounds","startFollow","roundPixels","cursors","createCursorKeys","overlap","spawns","onMeetEnemy","desert","group","classType","Zone","onEnterDesert","city","onEnterCity","onEnterForest","cave","onEnterCave","checkModal","RND","between","shake","stopPropagation","delta","body","setVelocity","left","isDown","setVelocityX","right","up","setVelocityY","down","play","DesertScene","rockSprites","desertSprites","caveSprites","planksSprites","miscSprites","bonesSprites","sekihiSprites","rocksTiles","desertTiles","caveTiles","plankTiles","miscTiles","bonesTiles","sekihiTiles","collider1","collider2","collider3","collider4","collider5","collider6","worldmap","onEnterWorldMap","ForestScene","landSprites","greenerySprites","treesOne","treesTwo","gnarlyTrees","hiDefGraves","gravesSprites","landTiles","greeneryTiles","treesOneTiles","treesTwoTiles","treesThreeTiles","gravesOneTiles","gravesTwoTiles","CaveScene","loDefCave","loDefFloor","hiDefCave","crystals","caveRunner","lowDefCaveTiles","lowDefFloorTiles","highDefCaveTiles","crystalsTiles","caveRunnerTiles","CityScene","bldgOne","bldgTwo","bldgThree","bldgFour","bldgFive","militaryBldgs","slums","dump","bike","grime","chars","bldgOneTiles","bldgTwoTiles","bldgThreeTiles","bldgFourTiles","bldgFiveTiles","militaryBldgsTiles","slumsTiles","dumpTiles","bikeTiles","grimeTiles","charsTiles","App","game","AUTO","zoom","default","arcade","gravity","debug","Navbar","bg","Brand","path","component","ReactDOM","document","getElementById"],"mappings":"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ACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACN1a,EAAIkT,kBAAkB,gBAAiB,CACjD8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACN1a,EAAIkT,kBAAkB,gBAAiB,CACjD8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACP1a,EAAIkT,kBAAkB,eAAgB,CAC/C8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACP1a,EAAIkT,kBAAkB,eAAgB,CAC/C8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACP1a,EAAIkT,kBAAkB,eAAgB,CAC/C8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACP1a,EAAIkT,kBAAkB,eAAgB,CAC/C8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACP1a,EAAIkT,kBAAkB,eAAgB,CAC/C8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACP1a,EAAIkT,kBAAkB,eAAgB,CAC/C8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GACP1a,EAAIkT,kBAAkB,eAAgB,CAC/C8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,GAEL1a,EAAIkT,kBAAkB,WAAY,CAC7C8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAa,EAAG,IAChBvH,EAAcnT,EAAIkT,kBAAkB,YAAa,CACjD8G,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GA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0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,0E,oBCA3CD,EAAOC,QAAU,IAA0B,0E,oBCA3CD,EAAOC,QAAU,IAA0B,0E,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,iE,oBCA3CD,EAAOC,QAAU,IAA0B,2E,oBCA3CD,EAAOC,QAAU,IAA0B,mG,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.22a84c8e.chunk.js","sourcesContent":["var map = {\n\t\"./ion-phaser.entry.js\": [\n\t\t1626,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1579;\nmodule.exports = webpackAsyncContext;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nconst Footer = () => {\r\n  return (\r\n    <Card className=\"text-center\">\r\n\r\n      <Card.Footer>\r\n\r\n        <Card.Body>\r\n\r\n          <Card.Title></Card.Title>\r\n          <Card.Text>\r\n            Project lead, character design and react by Will Satcher\r\n    </Card.Text>\r\n          <Card.Text>\r\n            UI UX and level design by Luke Klymshyn\r\n    </Card.Text>\r\n          <Card.Text>\r\n            authorization, Mongo by Hyejin Kim\r\n    </Card.Text>\r\n          <Card.Text>\r\n            Mongod/connection, deployment by Preston Carrol\r\n    </Card.Text>\r\n\r\n        </Card.Body>\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Modal = ({ handleClose, show, children }) => {\r\n  const showHideClassName = show ? \"modal d-block\" : \"modal d-none\";\r\n\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <div className=\"modal-container\">\r\n        {children}\r\n        <a href=\"javascript:;\" className=\"modal-close\" onClick={handleClose}>\r\n          Close\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets the player with the given id\r\n  getPlayer: function(playerId) {\r\n    return axios.get(\"/api/players/\" + playerId);\r\n  },//ON LOGIC SIDE; IF PLAYER EXISTS, GET ALL CREATURE DATA, ITEM DATA, LEVEL MULTIPLIERS, STATS, MODIFIERS, ETC\r\n  // Creates a player with the new id if the id doesn't exist\r\n  createPlayer: function(playerId) {\r\n    return axios.post(\"/api/players/\" + playerId);\r\n  },\r\n\r\n  //=========^^^^^^^^^^^WORKING^^^^^^^^^^^=========\r\n  \r\n  //Saves player state to the DB by id\r\n  updatePlayer: function(playerData) {\r\n    return axios.put(\"/api/players/\" + playerData.playerId, playerData);\r\n  },\r\n\r\n  //vvv~~May need to be post requests~~vvv\r\n  // Saves new items to the items object in the database (updating existing object)\r\n  saveItem: function(bookData) {\r\n    return axios.put(\"/api/books\", bookData);\r\n  },\r\n  // Saves new pets to the pets object in the database (updating existing object)\r\n  savePet: function(bookData) {\r\n    return axios.put(\"/api/books\", bookData);\r\n    //SAVES FROM OBJECT CREATED BY PET/ENEMY REQUEST\r\n  },\r\n  // Updates equipped items to the array in the player db -- REMEMBER TO UPDATE PLAYER STATS\r\n  equipItem: function(bookData) {\r\n    return axios.put(\"/api/books\", bookData);\r\n  },\r\n  // Updates equipped pets to the object in the player db\r\n  equipPet: function(bookData) {\r\n    return axios.put(\"/api/books\", bookData);\r\n    //SAVES FROM SAVED PETS\r\n  },\r\n  // Updates unequipped items to the array in the player db -- REMEMBER TO UPDATE PLAYER STATS\r\n  unequipItem: function(bookData) {\r\n    return axios.put(\"/api/books\", bookData);\r\n  }, \r\n  // Updates unequipped pets to the object in the player db\r\n  unequipPet: function(bookData) {\r\n    return axios.put(\"/api/books\", bookData);\r\n  },//^^^~~May need to be post requests~~^^^\r\n\r\n\r\n  // Deletes one of the item with the given name\r\n  deleteItem: function(id) {\r\n    return axios.delete(\"/api/books/\" + id);\r\n  },\r\n  // Deletes the creature with the given name [MAKE A FUNCTION TO ADD NUMBER TO \r\n  //CAPTURED CREATURES NAMES ;; EVENTUALLY: WAY FOR PLAYERS TO NAME CREATURES]\r\n  deletePet: function(id) {\r\n    return axios.delete(\"/api/books/\" + id);\r\n  }\r\n};\r\n\r\n//ON PET/ENEMY REQUEST::\r\n  //Get a creature's data from the DB;\r\n    //Apply a level modifier based on level, map, maybe char level\r\n  //-->PASSED BACK HERE WHEN SAVEPET CALLED\r\n\r\n//ON ITEM REQUEST; \r\n  //Get and save an item's data directly from the db\r\n\r\n//BATTLE REQUESTS::\r\n  //GET CURRENTLY EQUIPPED PETS\r\n  //GET \r\n\r\n//EQUIPPING PETS ~\r\n  //Either:\r\n    //An array with max length 3 that updates\r\n    //OR - all creatures in an object, the first three creatures always go in","import React from 'react';\r\nimport OktaSignIn from '@okta/okta-signin-widget';\r\nimport Backbone from 'backbone';\r\nimport Modal from \"../Modal/index.js\";\r\nimport \"./style.css\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport API from \"../../utils/API\";\r\n\r\nexport default class LoginPage extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = { \r\n      user: null\r\n    };\r\n    this.widget = new OktaSignIn({\r\n      baseUrl: 'https://dev-773440.okta.com',\r\n      clientId: '0oa3y16e0IagrZzy64x6',\r\n      redirectUri: 'http://localhost:3000',\r\n      authParams: {\r\n        issuer: \"https://dev-773440.okta.com/oauth2/default\",\r\n        responseType: ['token', 'id_token'],\r\n        display: 'page'\r\n      },\r\n      features: {\r\n          registration: true\r\n      }\r\n    });\r\n\r\n    this.showLogin = this.showLogin.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.widget.session.get((response) => {\r\n      if(response.status !== 'INACTIVE'){\r\n        this.setState({user:response.login});\r\n        //Load the player if they exist\r\n        const playerId = response.userId;\r\n        this.loadPlayer(playerId); \r\n      }else{\r\n        this.showLogin();\r\n      }\r\n    });\r\n  }\r\n\r\n  loadPlayer = (playerId) => {\r\n    //GET PLAYER FROM THE API\r\n    API.getPlayer(playerId)\r\n      .then(res => {\r\n        console.log(\"API RES::\", res)\r\n        if(res.data.length === 0){\r\n          console.log(\"PLAYER DOES NOT EXIST\");\r\n          this.newPlayer(playerId);\r\n        } else {\r\n          console.log(\"PLAYER EXISTS\");\r\n          //Pass the location to Phaser???\r\n          // console.log(\"res.data[0].location:: \", res.data[0].location);\r\n          //Update player state\r\n          // this.setState({player: res.data[0]})\r\n          this.playerLogin(res.data[0])\r\n        }}\r\n        )\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  newPlayer = (playerId) => {\r\n    console.log(\"CREATING NEW PLAYER...\");\r\n    //CREATE NEW PLAYER WITH THE API\r\n    API.createPlayer(playerId)\r\n      .then(res => {\r\n        console.log(\"NEW PLAYER CREATED\");\r\n        //A new player has been created; stats set to default\r\n      })\r\n  }\r\n\r\n  showLogin(){\r\n    Backbone.history.stop();\r\n    this.widget.renderEl({el:this.loginContainer},\r\n      (response) => {\r\n       if (response.status !== \"ACTIVATION_EMAIL_SENT\")   {\r\n          // console.log(response);\r\n          this.setState({user: response.claims.email});\r\n       }\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n      }\r\n    );\r\n  }\r\n\r\n  logout(){\r\n    this.widget.signOut(() => {\r\n      this.setState({user: null});\r\n      this.showLogin();\r\n    });\r\n  }\r\n\r\n  modalOpen() {\r\n    this.setState({ modal: true });\r\n  }\r\n\r\n  modalClose() {\r\n    this.setState({\r\n      user: \"\",\r\n      modal: false\r\n    });\r\n  }\r\n\r\n  playerLogin(playerObj){\r\n    this.props.handler(playerObj)\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        {this.state.user ? null : (\r\n          <a href=\"javascript:;\" onClick={e => this.modalOpen(e)}>\r\n          {/* ^^ This is a valid value; page reloads if 'fixed' */}\r\n          <Button variant=\"primary\">Click here to Sign Up or Log In</Button>\r\n          </a>\r\n        )}\r\n        <Modal show={this.state.modal} handleClose={e => this.modalClose(e)}>\r\n        {this.state.user ? null : (\r\n          <div ref={(div) => {this.loginContainer = div; }} />\r\n        )}\r\n        </Modal>\r\n        {this.state.user ? (\r\n          <div className=\"container\">\r\n            <div>Welcome, {this.state.user}!</div>\r\n            <Button variant=\"secondary\" onClick={this.logout}>Logout</Button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { useState } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { Button } from 'react-bootstrap';\r\nimport \"./style.css\";\r\n\r\nfunction SaveMenu(props) {\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" onClick={handleShow}>\r\n        Save menu\r\n        </Button>\r\n\r\n      <Modal show={show} onHide={handleClose} animation={false}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body >\r\n          <div className=\"menu\">\r\n            \r\n            <h1>\r\n              Save 1\r\n     </h1>\r\n\r\n          </div>\r\n\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n            </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Save Changes\r\n            </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SaveMenu;\r\n","//Phaser dependency\r\nimport Phaser from \"phaser\";\r\n\r\n//Level tilemaps\r\nimport worldTileMap from '../assets/worldmap/WorldMap.json';\r\nimport desertTileMap from '../assets/desert/Desert_Meteor.json';\r\nimport cityTileMap from '../assets/city/City.json';\r\nimport caveTileMap from '../assets/cave/Cave.json';\r\nimport forestTileMap from '../assets/forest/Forest.json';\r\n\r\n//Character sprites\r\nimport charSprites from '../assets/RPG_assets.png';\r\n\r\n//Creatures -- MAYBE LOAD WORLDMAP CREATURES HERE BUT OTHERWISE DELETE LATER\r\nimport dragonB from '../assets/creatures/capturecreatures/AutomatonBase.png';\r\nimport dragonO from '../assets/creatures/capturecreatures/ToxicRoot.png';\r\n\r\n//IMPORT DB OBJECT\r\n//USING DB OBJECT, PASS CURRENT SCENE INTO::\r\n// console.log(\"Login Page:: \", LoginPage)\r\n\r\nlet BootScene = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n    initialize:\r\n    function BootScene ()\r\n    {\r\n        Phaser.Scene.call(this, { key: 'BootScene' });\r\n    },\r\n    preload: function ()\r\n    {\r\n        // Load Enemies -- MAYBE LOAD WORLDMAP CREATURES HERE BUT OTHERWISE DELETE LATER\r\n        this.load.image(\"dragonblue\",dragonB);\r\n        this.load.image(\"dragonorrange\", dragonO);\r\n        this.load.spritesheet('player', charSprites, { frameWidth: 32, frameHeight: 32 });\r\n        //Load all tilemaps here & give them a key\r\n        this.load.tilemapTiledJSON('worldmap', worldTileMap);\r\n        this.load.tilemapTiledJSON('desertmap', desertTileMap);\r\n        this.load.tilemapTiledJSON('citymap', cityTileMap);\r\n        this.load.tilemapTiledJSON('cavemap', caveTileMap);\r\n        this.load.tilemapTiledJSON('forestmap', forestTileMap);\r\n    },\r\n\r\n    create: function ()\r\n    {\r\n        //LOADING SCREEN IF NEEDED\r\n        // start the current Scene\r\n        this.scene.start(\"WorldScene\");\r\n        //AFTER DB STUFF ADDED::\r\n            //start at imported || WorldScene\r\n    }\r\n});\r\n\r\nexport default BootScene;","import Phaser from \"phaser\";\r\n\r\n// base class for heroes and enemies\r\nlet Unit = new Phaser.Class({\r\n    Extends: Phaser.GameObjects.Sprite,\r\n\r\n    initialize:\r\n\r\n    function Unit(scene, x, y, texture, frame, type, hp, damage) {\r\n        Phaser.GameObjects.Sprite.call(this, scene, x, y, texture, frame)\r\n        this.type = type;\r\n        this.maxHp = this.hp = hp;\r\n        this.damage = damage; // default damage     \r\n        this.living = true;         \r\n        this.menuItem = null;\r\n    },\r\n    // we will use this to notify the menu item when the unit is dead\r\n    setMenuItem: function(item) {\r\n        this.menuItem = item;\r\n    },\r\n    // attack the target unit\r\n    attack: function(target) {\r\n        if(target.living) {\r\n            target.takeDamage(this.damage);\r\n            this.scene.events.emit(\"Message\", this.type + \" attacks \" + target.type + \" for \" + this.damage + \" damage\");\r\n        }\r\n    },    \r\n    takeDamage: function(damage) {\r\n        this.hp -= damage;\r\n        if(this.hp <= 0) {\r\n            this.hp = 0;\r\n            this.menuItem.unitKilled();\r\n            this.living = false;\r\n            this.visible = false;   \r\n            this.menuItem = null;\r\n        }\r\n    }    \r\n});\r\n\r\nexport default Unit;","import Phaser from \"phaser\";\r\nimport Unit from \"./unit\"\r\n\r\nlet PlayerCharacter = new Phaser.Class({\r\n    Extends: Unit,\r\n\r\n    initialize:\r\n    function PlayerCharacter(scene, x, y, texture, frame, type, hp, damage) {\r\n        Unit.call(this, scene, x, y, texture, frame, type, hp, damage);\r\n        // flip the image so I don\"t have to edit it manually\r\n        this.flipX = true;\r\n        \r\n        this.setScale(2);\r\n    }\r\n});\r\n\r\nexport default PlayerCharacter","import Phaser from \"phaser\";\r\nimport Unit from \"./unit\"\r\n\r\nlet Enemy = new Phaser.Class({\r\n    Extends: Unit,\r\n\r\n    initialize:\r\n    function Enemy(scene, x, y, texture, frame, type, hp, damage) {\r\n        Unit.call(this, scene, x, y, texture, frame, type, hp, damage);\r\n    }\r\n});\r\n\r\nexport default Enemy;","import Phaser from \"phaser\";\r\nimport PlayerCharacter from \"./prefabs/playercharacter\";\r\nimport Enemy from \"./prefabs/enemy\";\r\n//Make this a variable; load from DB object\r\nimport desertBG from '../assets/images/battle_backgrounds/desert.jpg';\r\n\r\n//Make a dummy object this pulls info to [FROM DB] and displays specific battle screen/characters, etc\r\n\r\n// console.log(\"tileMap:: \", tileMap);\r\n// console.log(\"tileSprites:: \", tileSprites);\r\nlet BattleScene = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n\r\n    initialize:\r\n\r\n    function BattleScene ()\r\n    {\r\n        Phaser.Scene.call(this, { key: \"BattleScene\" });\r\n    },\r\n    preload() {\r\n        this.load.image('background', desertBG);//the back ground image for the scene\r\n    },\r\n    create: function ()\r\n    {    \r\n        this.cameras.main.setBounds(0, 0, 4000, 4000);\r\n        this.physics.world.setBounds(0, 0, 4000, 4000);\r\n        this.add.image(0, 0, 'background').setOrigin(0).setScale(.15);\r\n        this.startBattle();\r\n        // on wake event we call startBattle too\r\n        this.sys.events.on('wake', this.startBattle, this);             \r\n    },\r\n    startBattle: function() {\r\n        // player character - warrior\r\n        let warrior = new PlayerCharacter(this, 230, 300, \"player\", 4, \"Warrior\", 100, 20);        \r\n        this.add.existing(warrior);           \r\n        \r\n        //TO DO; MAKE IT SO THIS CAN BE PASSED A SPECIFIC VALUE\r\n            //BE IT A RANDOM ENEMY FROM THE DB\r\n            //OR A SPECIFIC ENEMY FROM EN EVENT\r\n        let dragonblue = new Enemy(this, 570, 180, \"dragonblue\", null, \"Basic Automaton\", 50, 3);\r\n        this.add.existing(dragonblue);\r\n        \r\n        let dragonOrange = new Enemy(this, 500, 370, \"dragonorrange\", null,\"Toxic Root\", 50, 3);\r\n        this.add.existing(dragonOrange);\r\n        \r\n        // array with heroes\r\n        this.heroes = [ warrior ];\r\n        // array with enemies\r\n        this.enemies = [ dragonblue, dragonOrange ];\r\n        // array with both parties, who will attack\r\n        this.units = this.heroes.concat(this.enemies);\r\n        \r\n        this.index = -1; // currently active unit\r\n        \r\n        this.scene.run(\"UIScene\");        \r\n    },\r\n    nextTurn: function() {  \r\n        // if we have victory or game over\r\n        if(this.checkEndBattle()) {           \r\n            this.endBattle();\r\n            return;\r\n        }\r\n        do {\r\n            // currently active unit\r\n            this.index++;\r\n            // if there are no more units, we start again from the first one\r\n            if(this.index >= this.units.length) {\r\n                this.index = 0;\r\n            }            \r\n        } while(!this.units[this.index].living);\r\n        // if its player hero\r\n        if(this.units[this.index] instanceof PlayerCharacter) {\r\n            // we need the player to select action and then enemy\r\n            this.events.emit(\"PlayerSelect\", this.index);\r\n        } else { // else if its enemy unit\r\n            // pick random living hero to be attacked\r\n            let r;\r\n            do {\r\n                r = Math.floor(Math.random() * this.heroes.length);\r\n            } while(!this.heroes[r].living) \r\n            // call the enemy's attack function \r\n            this.units[this.index].attack(this.heroes[r]);  \r\n            // add timer for the next turn, so will have smooth gameplay\r\n            this.time.addEvent({ delay: 3000, callback: this.nextTurn, callbackScope: this });\r\n        }\r\n    },     \r\n    // check for game over or victory\r\n    checkEndBattle: function() {        \r\n        let victory = true;\r\n        // if all enemies are dead we have victory\r\n        for(let i = 0; i < this.enemies.length; i++) {\r\n            if(this.enemies[i].living)\r\n                victory = false;\r\n        }\r\n        let gameOver = true;\r\n        // if all heroes are dead we have game over\r\n        for(let i = 0; i < this.heroes.length; i++) {\r\n            if(this.heroes[i].living)\r\n                gameOver = false;\r\n        }\r\n        return victory || gameOver;\r\n    },\r\n    // when the player have selected the enemy to be attacked\r\n    receivePlayerSelection: function(action, target) {\r\n        if(action === \"attack\") {            \r\n            this.units[this.index].attack(this.enemies[target]);              \r\n        }\r\n        // next turn in 3 seconds\r\n        this.time.addEvent({ delay: 2500, callback: this.nextTurn, callbackScope: this });        \r\n    },    \r\n    endBattle: function() {       \r\n        // clear state, remove sprites\r\n        this.heroes.length = 0;\r\n        this.enemies.length = 0;\r\n        for(let i = 0; i < this.units.length; i++) {\r\n            // link item\r\n            this.units[i].destroy();            \r\n        }\r\n        this.units.length = 0;\r\n        // sleep the UI\r\n        this.scene.sleep('UIScene');\r\n        // return to Current Scene and sleep current BattleScene\r\n        this.scene.switch('WorldScene'); //CHANGE TO CURRENTSCENE; DB\r\n        this.scene.stop('BattleScene');\r\n    }\r\n});\r\n\r\nexport default BattleScene;","import Phaser from \"phaser\";\r\n\r\nlet MenuItem = new Phaser.Class({\r\n    Extends: Phaser.GameObjects.Text,\r\n    \r\n    initialize:\r\n            \r\n    function MenuItem(x, y, text, scene) {\r\n        Phaser.GameObjects.Text.call(this, scene, x, y, text, { color: \"#ffffff\", align: \"left\", fontSize: 15});\r\n    },\r\n    \r\n    select: function() {\r\n        this.setColor(\"#f8ff38\");\r\n    },\r\n    \r\n    deselect: function() {\r\n        this.setColor(\"#ffffff\");\r\n    },\r\n    // when the associated enemy or player unit is killed\r\n    unitKilled: function() {\r\n        this.active = false;\r\n        this.visible = false;\r\n    }\r\n    \r\n});\r\n\r\nexport default MenuItem;","import Phaser from \"phaser\";\r\nimport MenuItem from \"./menuitem\";\r\n\r\n// base menu class, container for menu items\r\nlet Menu = new Phaser.Class({\r\n    Extends: Phaser.GameObjects.Container,\r\n    \r\n    initialize:\r\n            \r\n    function Menu(x, y, scene, heroes) {\r\n        Phaser.GameObjects.Container.call(this, scene, x, y);\r\n        this.menuItems = [];\r\n        this.menuItemIndex = 0;\r\n        this.x = x;\r\n        this.y = y;        \r\n        this.selected = false;\r\n    },     \r\n    addMenuItem: function(unit) {\r\n        let menuItem = new MenuItem(0, this.menuItems.length * 20, unit, this.scene);\r\n        this.menuItems.push(menuItem);\r\n        this.add(menuItem); \r\n        return menuItem;\r\n    },  \r\n    // menu navigation \r\n    moveSelectionUp: function() {\r\n        this.menuItems[this.menuItemIndex].deselect();\r\n        do {\r\n            this.menuItemIndex--;\r\n            if(this.menuItemIndex < 0)\r\n                this.menuItemIndex = this.menuItems.length - 1;\r\n        } while(!this.menuItems[this.menuItemIndex].active);\r\n        this.menuItems[this.menuItemIndex].select();\r\n    },\r\n    moveSelectionDown: function() {\r\n        this.menuItems[this.menuItemIndex].deselect();\r\n        do {\r\n            this.menuItemIndex++;\r\n            if(this.menuItemIndex >= this.menuItems.length)\r\n                this.menuItemIndex = 0;\r\n        } while(!this.menuItems[this.menuItemIndex].active);\r\n        this.menuItems[this.menuItemIndex].select();\r\n    },\r\n    // select the menu as a whole and highlight the choosen element\r\n    select: function(index) {\r\n        if(!index)\r\n            index = 0;       \r\n        this.menuItems[this.menuItemIndex].deselect();\r\n        this.menuItemIndex = index;\r\n        while(!this.menuItems[this.menuItemIndex].active) {\r\n            this.menuItemIndex++;\r\n            if(this.menuItemIndex >= this.menuItems.length)\r\n                this.menuItemIndex = 0;\r\n            if(this.menuItemIndex === index)\r\n                return;\r\n        }        \r\n        this.menuItems[this.menuItemIndex].select();\r\n        this.selected = true;\r\n    },\r\n    // deselect this menu\r\n    deselect: function() {        \r\n        this.menuItems[this.menuItemIndex].deselect();\r\n        this.menuItemIndex = 0;\r\n        this.selected = false;\r\n    },\r\n    confirm: function() {\r\n        // when the player confirms his slection, do the action\r\n    },\r\n    // clear menu and remove all menu items\r\n    clear: function() {\r\n        for(let i = 0; i < this.menuItems.length; i++) {\r\n            this.menuItems[i].destroy();\r\n        }\r\n        this.menuItems.length = 0;\r\n        this.menuItemIndex = 0;\r\n    },\r\n    // recreate the menu items\r\n    remap: function(units) {\r\n        this.clear();        \r\n        for(let i = 0; i < units.length; i++) {\r\n            let unit = units[i];\r\n            unit.setMenuItem(this.addMenuItem(unit.type));            \r\n        }\r\n        this.menuItemIndex = 0;\r\n    }\r\n});\r\n\r\nexport default Menu;","import Phaser from \"phaser\";\r\nimport Menu from \"./menu\";\r\n\r\nlet HeroesMenu = new Phaser.Class({\r\n    Extends: Menu,\r\n    \r\n    initialize:\r\n            \r\n    function HeroesMenu(x, y, scene) {\r\n        Menu.call(this, x, y, scene);                    \r\n    }\r\n});\r\n\r\nexport default HeroesMenu;","import Phaser from \"phaser\";\r\nimport Menu from \"./menu\";\r\n\r\nlet EnemiesMenu = new Phaser.Class({\r\n    Extends: Menu,\r\n    \r\n    initialize:\r\n            \r\n    function EnemiesMenu(x, y, scene) {\r\n        Menu.call(this, x, y, scene);        \r\n    },       \r\n    confirm: function() {      \r\n        // the player has selected the enemy and we send its id with the event\r\n        this.scene.events.emit(\"Enemy\", this.menuItemIndex);\r\n    }\r\n});\r\n\r\nexport default EnemiesMenu;","import Phaser from \"phaser\";\r\nimport Menu from \"./menu\";\r\n\r\nlet ActionsMenu = new Phaser.Class({\r\n    Extends: Menu,\r\n    \r\n    initialize:\r\n            \r\n    function ActionsMenu(x, y, scene) {\r\n        Menu.call(this, x, y, scene);   \r\n        this.addMenuItem(\"Attack\");\r\n    },\r\n    confirm: function() { \r\n        // we select an action and go to the next menu and choose from the enemies to apply the action\r\n        this.scene.events.emit(\"SelectedAction\");        \r\n    }\r\n    \r\n});\r\n\r\nexport default ActionsMenu;","import Phaser from \"phaser\";\r\n\r\n// the message class extends containter \r\nlet Message = new Phaser.Class({\r\n\r\n    Extends: Phaser.GameObjects.Container,\r\n\r\n    initialize:\r\n    function Message(scene, events) {\r\n        Phaser.GameObjects.Container.call(this, scene, 160, 30);\r\n        let graphics = this.scene.add.graphics();\r\n        this.add(graphics);\r\n        graphics.lineStyle(1, 0xffffff, 0.8);\r\n        graphics.fillStyle(0x031f4c, 0.3);        \r\n        graphics.strokeRect(60, 400, 300, 60);\r\n        graphics.fillRect(60, 400, 300, 60);\r\n        //X, Y, W, H\r\n        this.text = new Phaser.GameObjects.Text(scene, 210, 430, \"\", { color: \"#ffffff\", align: \"center\", fontSize: 13, wordWrap: { width: 300, useAdvancedWrap: true }});\r\n        this.add(this.text);\r\n        this.text.setOrigin(0.5);        \r\n        events.on(\"Message\", this.showMessage, this);\r\n        this.visible = false;\r\n    },\r\n    showMessage: function(text) {\r\n        this.text.setText(text);\r\n        this.visible = true;\r\n        if(this.hideEvent)\r\n            this.hideEvent.remove(false);\r\n        this.hideEvent = this.scene.time.addEvent({ delay: 2000, callback: this.hideMessage, callbackScope: this });\r\n    },\r\n    hideMessage: function() {\r\n        this.hideEvent = null;\r\n        this.visible = false;\r\n    }\r\n});\r\n\r\nexport default Message;","import Phaser from \"phaser\";\r\nimport HeroesMenu from \"./prefabs/heroesmenu\";\r\nimport EnemiesMenu from \"./prefabs/enemiesmenu\";\r\nimport ActionsMenu from \"./prefabs/actionsmenu\";\r\nimport Message from \"./prefabs/message\";\r\n\r\n// User Interface scene\r\nlet UIScene = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n\r\n    initialize:\r\n\r\n    function UIScene ()\r\n    {\r\n        Phaser.Scene.call(this, { key: \"UIScene\" });\r\n    },\r\n\r\n    create: function ()\r\n    {    \r\n        // draw some background for the menu\r\n        this.graphics = this.add.graphics();\r\n        this.graphics.lineStyle(1, 0xffffff);\r\n        this.graphics.fillStyle(0x031f4c, 1);        \r\n        this.graphics.strokeRect(0, 480, 257, 150);\r\n        this.graphics.fillRect(0, 480, 257, 150);\r\n        this.graphics.strokeRect(258, 480, 235, 150);\r\n        this.graphics.fillRect(258, 480, 235, 150);\r\n        this.graphics.strokeRect(494, 480, 257, 150);\r\n        this.graphics.fillRect(494, 480, 257, 150);\r\n        //X, Y, WIDTH, HEIGHT \r\n\r\n        // basic container to hold all menus\r\n        this.menus = this.add.container();\r\n                \r\n        this.heroesMenu = new HeroesMenu(8, 500, this);           \r\n        this.actionsMenu = new ActionsMenu(265, 500, this);            \r\n        this.enemiesMenu = new EnemiesMenu(500, 500, this);   \r\n        \r\n        // the currently selected menu \r\n        this.currentMenu = this.actionsMenu;\r\n        \r\n        // add menus to the container\r\n        this.menus.add(this.heroesMenu);\r\n        this.menus.add(this.actionsMenu);\r\n        this.menus.add(this.enemiesMenu);\r\n                \r\n        this.battleScene = this.scene.get(\"BattleScene\");                                \r\n        \r\n        // listen for keyboard events\r\n        this.input.keyboard.on(\"keydown\", this.onKeyInput, this);   \r\n        \r\n        // when its player cunit turn to move\r\n        this.battleScene.events.on(\"PlayerSelect\", this.onPlayerSelect, this);\r\n        \r\n        // when the action on the menu is selected\r\n        // for now we have only one action so we dont send and action id\r\n        this.events.on(\"SelectedAction\", this.onSelectedAction, this);\r\n        \r\n        // an enemy is selected\r\n        this.events.on(\"Enemy\", this.onEnemy, this);\r\n        \r\n        // when the scene receives wake event\r\n        this.sys.events.on('wake', this.createMenu, this);\r\n        \r\n        // the message describing the current action\r\n        this.message = new Message(this, this.battleScene.events);\r\n        this.add.existing(this.message);        \r\n        \r\n        this.createMenu();     \r\n    },\r\n    createMenu: function() {\r\n        // map hero menu items to heroes\r\n        this.remapHeroes();\r\n        // map enemies menu items to enemies\r\n        this.remapEnemies();\r\n        // first move\r\n        this.battleScene.nextTurn(); \r\n    },\r\n    onEnemy: function(index) {\r\n        // when the enemy is selected, we deselect all menus and send event with the enemy id\r\n        this.heroesMenu.deselect();\r\n        this.actionsMenu.deselect();\r\n        this.enemiesMenu.deselect();\r\n        this.currentMenu = null;\r\n        this.battleScene.receivePlayerSelection(\"attack\", index);   \r\n    },\r\n    onPlayerSelect: function(id) {\r\n        // when its player turn, we select the active hero item and the first action\r\n        // then we make actions menu active\r\n        this.heroesMenu.select(id);\r\n        this.actionsMenu.select(0);\r\n        this.currentMenu = this.actionsMenu;\r\n    },\r\n    // we have action selected and we make the enemies menu active\r\n    // the player needs to choose an enemy to attack\r\n    onSelectedAction: function() {\r\n        this.currentMenu = this.enemiesMenu;\r\n        this.enemiesMenu.select(0);\r\n    },\r\n    remapHeroes: function() {\r\n        let heroes = this.battleScene.heroes;\r\n        this.heroesMenu.remap(heroes);\r\n    },\r\n    remapEnemies: function() {\r\n        let enemies = this.battleScene.enemies;\r\n        this.enemiesMenu.remap(enemies);\r\n    },\r\n    onKeyInput: function(event) {\r\n        if(this.currentMenu && this.currentMenu.selected) {\r\n            if(event.code === \"ArrowUp\") {\r\n                this.currentMenu.moveSelectionUp();\r\n            } else if(event.code === \"ArrowDown\") {\r\n                this.currentMenu.moveSelectionDown();\r\n            } else if(event.code === \"ArrowLeft\" || event.code === \"Shift\") {\r\n\r\n            } else if(event.code === \"Space\" || event.code === \"ArrowRight\") {\r\n                this.currentMenu.confirm();\r\n            } \r\n        }\r\n    },\r\n});\r\n\r\nexport default UIScene;","import Phaser from 'phaser';\r\nimport buttonYes from \"../../assets/images/buttons/buttonsyes.png\";\r\nimport buttonNo from \"../../assets/images/buttons/buttonsno.png\";\r\n\r\nlet DoorModal = new Phaser.Class ({\r\n    \r\n    Extends: Phaser.Scene,\r\n    initialize:\r\n    function DoorModal ()\r\n    {\r\n        Phaser.Scene.call(this, { key: 'DoorModal' });\r\n    },\r\n\r\n    init(data) {\r\n        this.parentScene = data.parentScene;\r\n        this.name = data.name;\r\n    },\r\n\r\n    preload() {\r\n        this.load.image(\"buttonYes\", buttonYes);\r\n        this.load.image(\"buttonNo\", buttonNo);\r\n    },\r\n\r\n    create() {\r\n        // blend modes //\r\n        /*\r\n        ADD: 1\r\n        COLOR: 15\r\n        COLOR_BURN: 8\r\n        COLOR_DODGE: 7\r\n        COPY: 26\r\n        DARKEN: 5\r\n        DESTINATION_ATOP: 24\r\n        DESTINATION_IN: 22\r\n        DESTINATION_OUT: 23\r\n        DESTINATION_OVER: 21\r\n        DIFFERENCE: 11\r\n        ERASE: 17\r\n        EXCLUSION: 12\r\n        HARD_LIGHT: 9\r\n        HUE: 13\r\n        LIGHTEN: 6\r\n        LIGHTER: 25\r\n        LUMINOSITY: 16\r\n        MULTIPLY: 2\r\n        NORMAL: 0\r\n        OVERLAY: 4\r\n        SATURATION: 14\r\n        SCREEN: 3\r\n        SKIP_CHECK: -1\r\n        SOFT_LIGHT: 10\r\n        SOURCE_ATOP: 20\r\n        SOURCE_IN: 18\r\n        SOURCE_OUT: 19\r\n        XOR: 27\r\n        */\r\n        this.events.on('transitionout', function(toScene, duration) {\r\n\r\n            this.tweens.add({\r\n                targets: this,\r\n                alpha: 0,\r\n                duration: 800\r\n            });\r\n\r\n        }, this);\r\n\r\n        var graphics = this.add.graphics({\r\n            lineStyle: {\r\n                width: 2,\r\n                color: 0x000000,\r\n                alpha: 0.7\r\n            },\r\n            fillStyle: {\r\n                color: 0x000000,\r\n                alpha: 0.7\r\n            }\r\n        });\r\n\r\n        var modal = new Phaser.Geom.Rectangle();\r\n        modal.width = 250;\r\n        modal.height = 150;\r\n        graphics.fillRectShape(modal);\r\n\r\n        \r\n        this.modalPanel = this.add.image(0, 0, \"missionGUI\", \"Yes\");\r\n        this.modalPanel.setScale(0.6, 0.6);\r\n        Phaser.Display.Align.In.Center(this.modalPanel, this.add.zone(modal.width * 0.5, modal.height * 0.5, modal.width, modal.height));\r\n        //\r\n\r\n        //NO BUTTON\r\n        this.closeBtn = this.add.image(0, 0, \"buttonNo\", \"No\");\r\n        this.closeBtn.setScale(0.05);\r\n        this.closeBtn.x = this.modalPanel.x + this.modalPanel.displayWidth * 0.5 - 50;\r\n        this.closeBtn.y = this.modalPanel.y - this.modalPanel.displayHeight * 0.5 + 30;\r\n        this.closeBtn.setInteractive({\r\n            useHandCursor: true\r\n        });\r\n        this.closeBtn.on(\r\n            'pointerdown',\r\n            function(pointer, item) {\r\n                this.scene.stop(\"DoorModal\");\r\n                return false;\r\n            },\r\n            this\r\n        );\r\n\r\n        //YES BUTTON\r\n        this.yesBtn = this.add.image(0, 0, \"buttonYes\", \"Yes\");\r\n        this.yesBtn.setScale(0.05);\r\n        this.yesBtn.x = this.modalPanel.x + this.modalPanel.displayWidth * 0.5 + 50;\r\n        this.yesBtn.y = this.modalPanel.y - this.modalPanel.displayHeight * 0.5 + 30;\r\n        this.yesBtn.setInteractive({\r\n            useHandCursor: true\r\n        });\r\n        this.yesBtn.on(\r\n            'pointerdown',\r\n            function(pointer, item) {\r\n                this.scene.stop(\"DoorModal\");\r\n                return true;\r\n            },\r\n            this\r\n        );\r\n\r\n        //Label for the Modal\r\n        this.buttonLabel = this.add.text(0, 0, \"Enter this Area?\", {\r\n            fontFamily: 'fondamentoregular',\r\n            fontSize: 24,\r\n            color: '#ffffff',\r\n            fontStyle: 'normal',\r\n            align: 'center'\r\n        });\r\n        \r\n        //Set this scene on top\r\n        this.scene.bringToTop();\r\n    },\r\n\r\n   staggeredShow() {},\r\n\r\n    update() {}\r\n})\r\n\r\nexport default DoorModal;","//Phaser Dependency\r\nimport Phaser from \"phaser\";\r\n\r\n//Tile Dependencies\r\nimport landBaseOne from '../assets/worldmap/tilesheets/castle4.png';\r\nimport landBaseTwo from '../assets/worldmap/tilesheets/Dungeon_A532.png';\r\nimport water from '../assets/worldmap/tilesheets/wateranimate2.png';\r\nimport forest from '../assets/worldmap/tilesheets/Forest.png';\r\nimport nature from '../assets/worldmap/tilesheets/nature2.png';\r\nimport worldOne from '../assets/worldmap/tilesheets/World_C32.png';\r\nimport worldTwo from '../assets/worldmap/tilesheets/WorldIcons.png';\r\n//console.log(\"tileMap:: \", tileMap);\r\n\r\nimport DoorModal from \"./prefabs/doormodal.js\";\r\n\r\nlet WorldScene = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n    initialize:\r\n    function WorldScene ()\r\n    {\r\n        Phaser.Scene.call(this, { key: 'WorldScene' });\r\n    },\r\n    preload: function ()\r\n    {\r\n/*                                                ******* _\r\n                                                *---******* *\r\n                                ~             *-----*******  *\r\n                         ~         ~         *-------*******  }\r\n                        __      _   _!__     *-------*******   }\r\n                   _   /  \\_  _/ \\  |::| ___ **-----********  *    ~\r\n                 _/ \\_/^    \\/   ^\\/|::|\\|:|  **---**** /^\\_ *      ~\r\n     ~        /\\/  ^ /  ^    / ^ ___|::|_|:|_/\\_***** /  ^  \\\r\n      `'     /  \\  _/ ^ ^   /    |::|--|:|---|  \\__/  ^      ^\\___\r\n           _/_^  \\/  ^    _/ ^   |::|::|:|-::| ^ /_  ^    ^    ^   \\_\r\n          /   \\^ /    /\\ /       |::|--|:|:--|  /  \\        ^         \\\r\n         /     \\/    /  /        |::|::|:|:-:| / ^  \\  ^      ^        \\\r\n   _Q   / _Q  _Q_Q  / _Q    _Q   |::|::|:|:::|/    ^ \\    _Q ~      ^     _.~\r\n  /_\\)   /_\\)/_/\\\\)  /_\\)  /_\\)  |::|::|:|:::|           /_\\)           /  \\     \r\n_O|/O___O|/O_OO|/O__O|/O__O|/O__________________________O|/O___________[ O ]\r\n/*////////////////////////////[MAP PROGRAMMING]////////////////////////////*/\r\n        \r\n        //Loading Enemies\r\n        this.load.image(\"dragonblue\", \"dragonB\");\r\n        this.load.image(\"dragonorrange\", \"dragonO\");\r\n\r\n        // map in json format\r\n        this.load.tilemapTiledJSON('worldmap', \"worldTilemap\");\r\n        // Give tile map identifiers and load them based on import\r\n        this.load.image('landone', landBaseOne);\r\n        this.load.image('landtwo', landBaseTwo);\r\n        this.load.image('water', water);\r\n        this.load.image('forest', forest);\r\n        this.load.image('nature', nature);\r\n        this.load.image('worldone', worldOne);\r\n        this.load.image('worldtwo', worldTwo);\r\n        //console.log(\"this.load.image('tiles', rockSprites):: \",this.load.image('tiles', rockSprites));\r\n\r\n        //What monsters to load\r\n        // this.load.image(\"dragonblue\",dragonB);\r\n        // this.load.image(\"dragonorrange\", dragonO);\r\n    },\r\n    create: function ()\r\n    {\r\n        // create the map\r\n        let map = this.make.tilemap({ key: 'worldmap' });\r\n        \r\n        // Map tilesets; Param1: Name of the tilemap in tiled (found in json); Param2: ame defined in tilemap load\r\n        let landOneTiles = map.addTilesetImage('castle', 'landone');\r\n        let landTwoTiles = map.addTilesetImage('Dungeon_A532', 'landtwo');\r\n        let waterTiles = map.addTilesetImage('wateranimate2', 'water');\r\n        let forestTiles = map.addTilesetImage('Forest', 'forest');\r\n        let natureTiles = map.addTilesetImage('nature2', 'nature');\r\n        let worldOneTiles = map.addTilesetImage('World_C32', 'worldone');\r\n        let worldTwoTiles = map.addTilesetImage('WorldIcons', 'worldtwo');\r\n        // console.log(\"Phaser.Cache:: \", Phaser.Cache);\r\n        // console.log(\"map:: \", map);\r\n        \r\n        // creating the layers\r\n        //FLOOR LAYER 1 -- Param1: Name of the layer in JSON Object; Param2: map names used in that layer\r\n        let floor1 = map.createStaticLayer('Tile Layer 1', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles], 0, 0);\r\n        //FLOOR LAYER 2\r\n        let floor2 = map.createStaticLayer('Tile Layer 2', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n\r\n        let floor3 = map.createStaticLayer('Tile Layer 3', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor4 = map.createStaticLayer('Tile Layer 4', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor5 = map.createStaticLayer('Tile Layer 5', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor6 = map.createStaticLayer('Tile Layer 6', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor7 = map.createStaticLayer('Tile Layer 7', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor8 = map.createStaticLayer('Tile Layer 8', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor9 = map.createStaticLayer('Tile Layer 9', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor10 = map.createStaticLayer('Tile Layer 10', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor11 = map.createStaticLayer('Tile Layer 11', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor12 = map.createStaticLayer('Tile Layer 12', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor13 = map.createStaticLayer('Tile Layer 13', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let floor14 = map.createStaticLayer('Tile Layer 14', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        //Overtile Layers\r\n        let overtile = map.createStaticLayer('Overtile', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        let overtileTwo = map.createStaticLayer('Overtile2', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        //Obstacles Layer\r\n        let collider = map.createStaticLayer('Obstacles', [\r\n            landOneTiles,\r\n            landTwoTiles, \r\n            waterTiles,\r\n            forestTiles,\r\n            natureTiles,\r\n            worldOneTiles,\r\n            worldTwoTiles], 0, 0);\r\n        \r\n        // make all tiles in obstacles collidable\r\n        collider.setCollisionByExclusion([-1]);\r\n        overtile.setDepth(1);\r\n        overtileTwo.setDepth(1);\r\n        \r\n                                       /*  \r\n        ___________________________¶¶¶¶¶¶\r\n        _______________________¶¶¶¶¶ccee¶¶\r\n        _____________________¶¶¶cccceeaa¶¶\r\n        _________________¶¶¶¶¶cccceeaaa¶¶\r\n        _____________¶¶¶¶¶cccccceeaaaa¶¶\r\n        __¶¶¶¶¶¶¶¶¶¶¶¶cccccceeaaaaaaa¶¶  ~~CHARACTER PROGRAMMING~~ \r\n        ¶¶¶ccccccccccccceeaaaaaaaaaa¶¶               ``\r\n        __¶¶¶aaaaaaaeeceeeeeaaaaaag¶¶                 \\\\\r\n        ____¶¶¶¶¶¶aaaaaaaaeeeeeeag¶¶                  //\r\n        ________¶¶¶¶¶¶¶¶aaaaaaeeegg¶¶            ====//\r\n        _________#######¶¶¶¶¶aaaaggg¶¶          //\r\n        ________###|¯|########¶¶aaaaggg¶¶      //\r\n        ______¶¶###|_|###|¯|#####¶¶¶aagggg¶¶  //\r\n        ____¶¶££#########|_|########¶¶¶¶ggg¶¶//\r\n        __¶¶££¶¶#################£££££¶¶¶¶¶ //\r\n        __¶¶££££££#########££££££££¶¶£¶¶   //\r\n        __¶¶¶¶££££££££££££¶¶¶¶¶¶£££££¶¶   //\r\n        _¶§xxx¶¶££££££¶¶¶¶££££££££££££¶¶ //\r\n        _¶§xxx¶¶££££¶¶¶¶¶¶££££££££££££¶¶//\r\n        __¶¶¶¶££££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££¶¶¶¶¶¶££££££££££¶¶\r\n        __¶¶£££¶¶£££££££££¶¶££££££££¶¶\r\n        __¶¶££££¶¶¶£££££££¶¶££££££££¶¶\r\n        _¶¶£££££££¶¶¶¶¶¶££££¶¶££££¶¶££¶¶\r\n        ¶¶££££££££££££££££££££¶¶¶¶££££££¶¶\r\n        _¶¶¶¶¶.__|¶¶¶¶¶¶¶¶¶¶¶¶¶____¶¶¶¶¶¶¶\r\n                             ===*/\r\n\r\n        //EVENTUALLY: PUT THIS IN A SEPARATE FILE\r\n        // animation with key 'left', we don't need left and right as we will use one and flip the sprite\r\n        this.anims.create({\r\n            key: 'left',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        \r\n        // animation with key 'right'\r\n        this.anims.create({\r\n            key: 'right',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'up',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [2, 8, 2, 14]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'down',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [ 0, 6, 0, 12 ] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });        \r\n\r\n        // our player sprite created through the physics system (params measured in pixels)\r\n        this.player = this.physics.add.sprite(1366, 2984, 'player', 15);\r\n        \r\n        // don't go out of the map\r\n        this.physics.world.bounds.width = map.widthInPixels;\r\n        this.physics.world.bounds.height = map.heightInPixels;\r\n        this.player.setCollideWorldBounds(true);\r\n        \r\n        // don't walk on colliders\r\n        this.physics.add.collider(this.player, collider);\r\n\r\n        // limit camera to map\r\n        this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\r\n        this.cameras.main.startFollow(this.player);\r\n        this.cameras.main.roundPixels = true; // avoid tile bleed\r\n    \r\n        // user input\r\n        this.cursors = this.input.keyboard.createCursorKeys();\r\n        \r\n        // where the enemies will be ~~ SOMEWHAT RANDOMIZED; DOESN'T CHANGE\r\n        //COMMENT OUT FOR TESTING\r\n        // this.spawns = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        // for(let i = 0; i < 40; i++) {\r\n        //     let x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n        //     let y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n        //     // parameters are x, y, width, height\r\n        //     this.spawns.create(x, y, 20, 20);            \r\n        // }\r\n        //COMMENT OUT FOR TESTING        \r\n        //Add colliders for enemies\r\n        this.physics.add.overlap(this.player, this.spawns, this.onMeetEnemy, false, this);\r\n\r\n    //        ______\r\n    //     ,-' ;  ! `-.\r\n    //    / :  !  :  . \\\r\n    //   |_ ;   __:  ;  |\r\n    //   )| .  :)(.  !  |       REAL\r\n    //   |\"    (##)  _  |           FAKE\r\n    //   |  :  ;`'  (_) (               DOORS\r\n    //   |  :  :  .     |\r\n    //   )_ !  ,  ;  ;  |\r\n    //   || .  .  :  :  |       \"Get in here quick, get out quicker\r\n    //   |\" .  |  :  .  |           with an arm full of fake doors in your arms.\"\r\n    //   |mt-2_;----.___|                                           -Fake Doors Salesman\r\n\r\n        // where the Desert will be\r\n        this.desert = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        // parameters are x, y, width, height\r\n        this.desert.create(300, 3076, 120, 120);                 \r\n        //Add colliders\r\n        this.physics.add.overlap(this.player, this.desert, this.onEnterDesert, false /*this.checkModal*/, this);\r\n  \r\n        // where the Base City will be\r\n        this.city = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        // parameters are x, y, width, height\r\n        this.city.create(1286, 360, 120, 120);                 \r\n        //Add colliders\r\n        this.physics.add.overlap(this.player, this.city, this.onEnterCity, false /*this.checkModal*/, this);\r\n  \r\n        // where the Forest will be\r\n        this.forest = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        // parameters are x, y, width, height\r\n        this.forest.create(1160, 1852, 100, 100);                 \r\n        //Add colliders\r\n        this.physics.add.overlap(this.player, this.forest, this.onEnterForest, false /*this.checkModal*/, this);\r\n  \r\n        // where the Cave will be\r\n        this.cave = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        // parameters are x, y, width, height\r\n        this.cave.create(1268, 792, 100, 80);                 \r\n        //Add colliders\r\n        this.physics.add.overlap(this.player, this.cave, this.onEnterCave, false /*this.checkModal*/, this);\r\n    },\r\n    checkModal: function(){\r\n        //if countdowntimefinished = true{ ...  }\r\n        this.scene.run(\"DoorModal\");\r\n        //Return true or false from doormodal\r\n        //After answering, countdowntimefinished = false; count down three seconds & countdowntimefinished = true \r\n    },\r\n    onMeetEnemy: function(player, zone) {        \r\n        // we move the zone to some other location\r\n        zone.x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n        zone.y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n        \r\n        // shake the world\r\n        this.cameras.main.shake(300);\r\n\r\n        //stop input on current scene \r\n        this.input.stopPropagation();\r\n        // start battle \r\n        this.scene.switch('BattleScene'); \r\n    },\r\n    onEnterDesert: function(player, zone) {        \r\n        //Countdown three seconds; if user still in area -\r\n        //MODAL TO ASK IF USER WANTS TO ENTER DESERT -- if so, scene switch\r\n        //Move the scene to the Desert        \r\n        \r\n        this.scene.stop(\"WorldMap\");\r\n        this.input.stopPropagation();\r\n        // USE THIS WITH MODAL TO PAUSE MODAL this.scene.pause(\"WorldMap\");\r\n        // move to  \r\n        this.scene.start('DesertScene'); \r\n        //USE this.scene.switch WHEN FIXED\r\n    },\r\n    onEnterCity: function(player, zone) {\r\n        //Countdown three seconds; if user still in area -        \r\n        //MODAL TO ASK IF USER WANTS TO ENTER CITY -- if so, scene switch\r\n        //Move the scene to the City        \r\n        this.scene.stop(\"WorldMap\");\r\n        this.input.stopPropagation();\r\n        // move to  \r\n        this.scene.switch('CityScene'); \r\n    },\r\n    onEnterCave: function(player, zone) {\r\n        //Countdown three seconds; if user still in area -        \r\n        //MODAL TO ASK IF USER WANTS TO ENTER CAVE -- if so, scene switch\r\n        //Move the scene to the Cave        \r\n        this.scene.stop(\"WorldMap\");\r\n        this.input.stopPropagation();\r\n        // move to  \r\n        this.scene.switch('CaveScene'); \r\n    },\r\n    onEnterForest: function(player, zone) {\r\n        //Countdown three seconds; if user still in area -        \r\n        //MODAL TO ASK IF USER WANTS TO ENTER FOREST -- if so, scene switch\r\n        //Move the scene to the Forest        \r\n        this.scene.stop(\"WorldMap\");\r\n        this.input.stopPropagation();\r\n        // move to  \r\n        this.scene.switch('ForestScene'); \r\n    },\r\n\r\n//            __    _\r\n//             =  _( }\r\n//    -=   _   <<  \\\r\n//        `.\\__/`/\\\\    -=CHARACTER MOVEMENT\r\n// -=      '--'\\\\  `\r\n//     -=     //\r\n// jgs        \\)\r\n\r\n    update: function (time, delta)\r\n    {\r\n        //console.log(delta);\r\n        // this.controls.update(delta);\r\n    \r\n        this.player.body.setVelocity(0);\r\n        // Horizontal movement\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.body.setVelocityX(-80);\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.body.setVelocityX(80);\r\n        }\r\n\r\n        // Vertical movement\r\n        if (this.cursors.up.isDown)\r\n        {\r\n            this.player.body.setVelocityY(-80);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.body.setVelocityY(80);\r\n        }        \r\n\r\n        // Update the animation last and give left/right animations precedence over up/down animations\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.anims.play('left', true);\r\n            this.player.flipX = true;\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.anims.play('right', true);\r\n            this.player.flipX = false;\r\n        }\r\n        else if (this.cursors.up.isDown)\r\n        {\r\n            this.player.anims.play('up', true);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.anims.play('down', true);\r\n        }\r\n        else\r\n        {\r\n            this.player.anims.stop();\r\n        }\r\n    }\r\n    \r\n});\r\n\r\nexport default WorldScene;","//Phaser Dependency\r\nimport Phaser from \"phaser\";\r\n\r\n//Tile dependencies\r\nimport rockSprites from '../assets/desert/tilesheets/rocks.png';\r\nimport desertSprites from '../assets/desert/tilesheets/Outside_A2.png';\r\nimport caveSprites from '../assets/desert/tilesheets/red_cave.png';\r\nimport planksSprites from '../assets/desert/tilesheets/planks.png';\r\nimport miscSprites from '../assets/desert/tilesheets/miscshop_bridge.png';\r\nimport bonesSprites from '../assets/desert/tilesheets/bones.png';\r\nimport sekihiSprites from '../assets/desert/tilesheets/sekihi01.png';\r\n//console.log(\"tileMap:: \", tileMap);\r\n\r\nlet DesertScene = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n    initialize:\r\n    function DesertScene ()\r\n    {\r\n        Phaser.Scene.call(this, { key: 'DesertScene' });\r\n    },\r\n    preload: function ()\r\n    {\r\n/*                                                ******* _\r\n                                                *---******* *\r\n                                ~             *-----*******  *\r\n                         ~         ~         *-------*******  }\r\n                        __      _   _!__     *-------*******   }\r\n                   _   /  \\_  _/ \\  |::| ___ **-----********  *    ~\r\n                 _/ \\_/^    \\/   ^\\/|::|\\|:|  **---**** /^\\_ *      ~\r\n     ~        /\\/  ^ /  ^    / ^ ___|::|_|:|_/\\_***** /  ^  \\\r\n      `'     /  \\  _/ ^ ^   /    |::|--|:|---|  \\__/  ^      ^\\___\r\n           _/_^  \\/  ^    _/ ^   |::|::|:|-::| ^ /_  ^    ^    ^   \\_\r\n          /   \\^ /    /\\ /       |::|--|:|:--|  /  \\        ^         \\\r\n         /     \\/    /  /        |::|::|:|:-:| / ^  \\  ^      ^        \\\r\n   _Q   / _Q  _Q_Q  / _Q    _Q   |::|::|:|:::|/    ^ \\    _Q ~      ^     _.~\r\n  /_\\)   /_\\)/_/\\\\)  /_\\)  /_\\)  |::|::|:|:::|           /_\\)           /  \\     \r\n_O|/O___O|/O_OO|/O__O|/O__O|/O__________________________O|/O___________[ O ]\r\n/*////////////////////////////[MAP PROGRAMMING]////////////////////////////*/\r\n\r\n\r\n        // map in json format -- first name os key given in boot, then name of map\r\n        this.load.tilemapTiledJSON('desertmap', \"desertTileMap\");\r\n        // Load the tile maps & give them identifiers\r\n        this.load.image('rocks', rockSprites);\r\n        this.load.image('desert', desertSprites);\r\n        this.load.image('cave', caveSprites);\r\n        this.load.image('planks', planksSprites);\r\n        this.load.image('misc', miscSprites);\r\n        this.load.image('bones', bonesSprites);\r\n        this.load.image('sekihi', sekihiSprites);\r\n        //console.log(\"this.load.image('tiles', rockSprites):: \",this.load.image('tiles', rockSprites));\r\n        \r\n        //What monsters to load\r\n        // this.load.image(\"dragonblue\",dragonB);\r\n        // this.load.image(\"dragonorrange\", dragonO);\r\n    },\r\n    create: function ()\r\n    {\r\n        // create the map\r\n        let map = this.make.tilemap({ key: 'desertmap' });\r\n        \r\n        // Map tilesets; Param1: Name of the tilemap in tiled (found in json); Param2: ame defined in tilemap load\r\n        let rocksTiles = map.addTilesetImage('rocks', 'rocks');\r\n        let desertTiles = map.addTilesetImage('Outside_A2', 'desert');\r\n        let caveTiles = map.addTilesetImage('red_cave', 'cave');\r\n        let plankTiles = map.addTilesetImage('planks', 'planks');\r\n        let miscTiles = map.addTilesetImage('miscshop_bridge', 'misc');\r\n        let bonesTiles = map.addTilesetImage('bones', 'bones');\r\n        let sekihiTiles = map.addTilesetImage('sekihi01', 'sekihi');\r\n        // console.log(\"Phaser.Cache:: \", Phaser.Cache);\r\n        // console.log(\"map:: \", map);\r\n        \r\n        // creating the layers\r\n        //FLOOR LAYER 1 -- Param1: Name of the layer in JSON Object; Param2: map names used in that layer\r\n        let floor1 = map.createStaticLayer('Tile Floor 1', [\r\n            rocksTiles,\r\n            caveTiles, \r\n            desertTiles], 0, 0);\r\n        //FLOOR LAYER 2\r\n        let floor2 = map.createStaticLayer('Tile Floor 2', [\r\n            rocksTiles, \r\n            desertTiles, \r\n            caveTiles, \r\n            plankTiles, \r\n            bonesTiles], 0, 0);\r\n        //COLLIDER LAYERS (REQUIRED FOR VARIABLES)\r\n        let collider1 = map.createStaticLayer('Tile Layer 1', [\r\n            rocksTiles, \r\n            desertTiles, \r\n            caveTiles, \r\n            plankTiles, \r\n            miscTiles, \r\n            bonesTiles, \r\n            sekihiTiles], 0, 0);\r\n        let collider2 = map.createStaticLayer('Tile Layer 2', [\r\n            rocksTiles, \r\n            desertTiles, \r\n            caveTiles, \r\n            plankTiles, \r\n            miscTiles, \r\n            bonesTiles, \r\n            sekihiTiles], 0, 0);\r\n        let collider3 = map.createStaticLayer('Tile Layer 3', [\r\n            rocksTiles, \r\n            desertTiles, \r\n            caveTiles, \r\n            plankTiles, \r\n            miscTiles, \r\n            bonesTiles, \r\n            sekihiTiles], 0, 0);\r\n        let collider4 = map.createStaticLayer('Tile Layer 4', [\r\n            rocksTiles, \r\n            desertTiles, \r\n            caveTiles, \r\n            plankTiles, \r\n            miscTiles, \r\n            bonesTiles, \r\n            sekihiTiles], 0, 0);\r\n        let collider5 = map.createStaticLayer('Tile Layer 5', [\r\n            rocksTiles, \r\n            desertTiles, \r\n            caveTiles, \r\n            plankTiles, \r\n            miscTiles, \r\n            bonesTiles, \r\n            sekihiTiles], 0, 0);\r\n        let collider6 = map.createStaticLayer('Tile Layer 6', [\r\n            rocksTiles, \r\n            desertTiles, \r\n            caveTiles, \r\n            plankTiles, \r\n            miscTiles, \r\n            bonesTiles, \r\n            sekihiTiles], 0, 0);\r\n        \r\n        // make all tiles in obstacles collidable\r\n        collider1.setCollisionByExclusion([-1]);\r\n        collider2.setCollisionByExclusion([-1]);\r\n        collider3.setCollisionByExclusion([-1]);\r\n        collider4.setCollisionByExclusion([-1]);\r\n        collider5.setCollisionByExclusion([-1]);\r\n        collider6.setCollisionByExclusion([-1]);\r\n        \r\n                                       /*  \r\n        ___________________________¶¶¶¶¶¶\r\n        _______________________¶¶¶¶¶ccee¶¶\r\n        _____________________¶¶¶cccceeaa¶¶\r\n        _________________¶¶¶¶¶cccceeaaa¶¶\r\n        _____________¶¶¶¶¶cccccceeaaaa¶¶\r\n        __¶¶¶¶¶¶¶¶¶¶¶¶cccccceeaaaaaaa¶¶  ~~CHARACTER PROGRAMMING~~ \r\n        ¶¶¶ccccccccccccceeaaaaaaaaaa¶¶               ``\r\n        __¶¶¶aaaaaaaeeceeeeeaaaaaag¶¶                 \\\\\r\n        ____¶¶¶¶¶¶aaaaaaaaeeeeeeag¶¶                  //\r\n        ________¶¶¶¶¶¶¶¶aaaaaaeeegg¶¶            ====//\r\n        _________#######¶¶¶¶¶aaaaggg¶¶          //\r\n        ________###|¯|########¶¶aaaaggg¶¶      //\r\n        ______¶¶###|_|###|¯|#####¶¶¶aagggg¶¶  //\r\n        ____¶¶££#########|_|########¶¶¶¶ggg¶¶//\r\n        __¶¶££¶¶#################£££££¶¶¶¶¶ //\r\n        __¶¶££££££#########££££££££¶¶£¶¶   //\r\n        __¶¶¶¶££££££££££££¶¶¶¶¶¶£££££¶¶   //\r\n        _¶§xxx¶¶££££££¶¶¶¶££££££££££££¶¶ //\r\n        _¶§xxx¶¶££££¶¶¶¶¶¶££££££££££££¶¶//\r\n        __¶¶¶¶££££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££¶¶¶¶¶¶££££££££££¶¶\r\n        __¶¶£££¶¶£££££££££¶¶££££££££¶¶\r\n        __¶¶££££¶¶¶£££££££¶¶££££££££¶¶\r\n        _¶¶£££££££¶¶¶¶¶¶££££¶¶££££¶¶££¶¶\r\n        ¶¶££££££££££££££££££££¶¶¶¶££££££¶¶\r\n        _¶¶¶¶¶.__|¶¶¶¶¶¶¶¶¶¶¶¶¶____¶¶¶¶¶¶¶\r\n                             ===*/\r\n\r\n        // animation with key 'left', we don't need left and right as we will use one and flip the sprite\r\n        this.anims.create({\r\n            key: 'left',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        \r\n        // animation with key 'right'\r\n        this.anims.create({\r\n            key: 'right',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'up',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [2, 8, 2, 14]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'down',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [ 0, 6, 0, 12 ] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });        \r\n\r\n        // our player sprite created through the physics system (params measured in pixels)\r\n        this.player = this.physics.add.sprite(50, 550, 'player', 15);\r\n        \r\n        // don't go out of the map\r\n        this.physics.world.bounds.width = map.widthInPixels;\r\n        this.physics.world.bounds.height = map.heightInPixels;\r\n        this.player.setCollideWorldBounds(true);\r\n        \r\n        // don't walk on colliders\r\n        this.physics.add.collider(this.player, collider1);\r\n        this.physics.add.collider(this.player, collider2);\r\n        this.physics.add.collider(this.player, collider3);\r\n        this.physics.add.collider(this.player, collider4);\r\n        this.physics.add.collider(this.player, collider5);\r\n\r\n        // limit camera to map\r\n        this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\r\n        this.cameras.main.startFollow(this.player);\r\n        this.cameras.main.roundPixels = true; // avoid tile bleed\r\n    \r\n        // user input\r\n        this.cursors = this.input.keyboard.createCursorKeys();\r\n        \r\n        // where the enemies will be ~~ SOMEWHAT RANDOMIZED; DOESN'T CHANGE\r\n        this.spawns = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        for(let i = 0; i < 40; i++) {\r\n            let x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n            let y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n            // parameters are x, y, width, height\r\n            this.spawns.create(x, y, 20, 20);            \r\n        }        \r\n        // add colliders\r\n        this.physics.add.overlap(this.player, this.spawns, this.onMeetEnemy, false, this);\r\n\r\n        //        |~\r\n        //}------{\\\\\r\n        //…………µ˜……\\\\\r\n        //   door …\\\\\r\n        //   dOOR  …\\\\\r\n        //   DOOR   …\\\\\r\n        //   DOOr   .π\\\\\r\n        //``§˚ºº•øˆ¨å§˚ºº•øˆ¨å§\r\n        // where the Desert will be\r\n        this.worldmap = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        // parameters are x, y, width, height\r\n        this.worldmap.create(0, 550, 20, 420);                 \r\n        //Add colliders\r\n        this.physics.add.overlap(this.player, this.worldmap, this.onEnterWorldMap, false, this);\r\n    },\r\n    onMeetEnemy: function(player, zone) {        \r\n        // we move the zone to some other location\r\n        zone.x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n        zone.y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n        \r\n        // shake the world\r\n        this.cameras.main.shake(300);\r\n        \r\n        //[[[  VIP :: CHANGE SO BATTLES ARE RANDOM!!! ]]]\r\n        // start battle \r\n        //PUT LUKE'S BATTLE CODE HERE\r\n        //&& CHANGE THE STATE TO BATTLE; SHOW THE BATTLE SCREEN \r\n        this.input.stopPropagation();\r\n        \r\n        // start battle \r\n        this.scene.switch('BattleScene');\r\n    },\r\n    onEnterWorldMap: function(player, zone) {\r\n        //MODAL TO ASK IF USER WANTS TO ENTER WORLD -- if so, scene switch\r\n        //Move the scene to the world\r\n        this.input.stopPropagation();\r\n        // Move to world scene \r\n        this.scene.start('WorldScene'); \r\n        this.scene.stop('DesertScene');\r\n    },\r\n    update: function (time, delta)\r\n    {\r\n        //console.log(delta);\r\n        // this.controls.update(delta);\r\n    \r\n        this.player.body.setVelocity(0);\r\n        // Horizontal movement\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.body.setVelocityX(-80);\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.body.setVelocityX(80);\r\n        }\r\n\r\n        // Vertical movement\r\n        if (this.cursors.up.isDown)\r\n        {\r\n            this.player.body.setVelocityY(-80);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.body.setVelocityY(80);\r\n        }        \r\n\r\n        // Update the animation last and give left/right animations precedence over up/down animations\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.anims.play('left', true);\r\n            this.player.flipX = true;\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.anims.play('right', true);\r\n            this.player.flipX = false;\r\n        }\r\n        else if (this.cursors.up.isDown)\r\n        {\r\n            this.player.anims.play('up', true);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.anims.play('down', true);\r\n        }\r\n        else\r\n        {\r\n            this.player.anims.stop();\r\n        }\r\n    }\r\n    \r\n});\r\n\r\nexport default DesertScene;","//Phaser dependency\r\nimport Phaser from \"phaser\";\r\n\r\n//Tile Dependencies\r\nimport hiDefGraves from '../assets/forest/tilesheets/d6qnbs4-c4ff2415-2303-4298-98c8-21f24187b9eb.png';\r\nimport landSprites from '../assets/forest/tilesheets/d9xkdpm-a3f22a0a-77e9-4aa5-999c-53bab01d0fa4.png';\r\nimport gnarlyTrees from '../assets/forest/tilesheets/dapf6nc-562c87b7-1de8-45c2-979f-18e7aa8b98ad.png';\r\nimport gravesSprites from '../assets/forest/tilesheets/graves-shadow_1.png';\r\nimport treesOne from '../assets/forest/tilesheets/mv_trees_by_schwarzenacht-dazcdmq-1.png';\r\nimport treesTwo from '../assets/forest/tilesheets/pandamaru_mv_nature1_by_schwarzenacht-d9k7n23.png';\r\nimport greenerySprites from '../assets/forest/tilesheets/rpg_maker__grass__flowers_and_windows_tileset_by_xxjapozeroxx-dbpxkvy.png';\r\n//console.log(\"tileMap:: \", tileMap);\r\n\r\nlet ForestScene = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n    initialize:\r\n    function ForestScene ()\r\n    {\r\n        Phaser.Scene.call(this, { key: 'ForestScene' });\r\n    },\r\n    preload: function ()\r\n    {\r\n/*                                                ******* _\r\n                                                *---******* *\r\n                                ~             *-----*******  *\r\n                         ~         ~         *-------*******  }\r\n                        __      _   _!__     *-------*******   }\r\n                   _   /  \\_  _/ \\  |::| ___ **-----********  *    ~\r\n                 _/ \\_/^    \\/   ^\\/|::|\\|:|  **---**** /^\\_ *      ~\r\n     ~        /\\/  ^ /  ^    / ^ ___|::|_|:|_/\\_***** /  ^  \\\r\n      `'     /  \\  _/ ^ ^   /    |::|--|:|---|  \\__/  ^      ^\\___\r\n           _/_^  \\/  ^    _/ ^   |::|::|:|-::| ^ /_  ^    ^    ^   \\_\r\n          /   \\^ /    /\\ /       |::|--|:|:--|  /  \\        ^         \\\r\n         /     \\/    /  /        |::|::|:|:-:| / ^  \\  ^      ^        \\\r\n   _Q   / _Q  _Q_Q  / _Q    _Q   |::|::|:|:::|/    ^ \\    _Q ~      ^     _.~\r\n  /_\\)   /_\\)/_/\\\\)  /_\\)  /_\\)  |::|::|:|:::|           /_\\)           /  \\     \r\n_O|/O___O|/O_OO|/O__O|/O__O|/O__________________________O|/O___________[ O ]\r\n/*////////////////////////////[MAP PROGRAMMING]////////////////////////////*/\r\n\r\n\r\n        // map in json format\r\n        this.load.tilemapTiledJSON('forestmap', \"forestTileMap\");\r\n        // Load the tile maps & give them identifiers\r\n        this.load.image('land', landSprites);\r\n        this.load.image('greenery', greenerySprites);\r\n        this.load.image('treesone', treesOne);\r\n        this.load.image('treestwo', treesTwo);\r\n        this.load.image('treesthree', gnarlyTrees);\r\n        this.load.image('gravesone', hiDefGraves);\r\n        this.load.image('gravestwo', gravesSprites);\r\n        //console.log(\"this.load.image('tiles', rockSprites):: \",this.load.image('tiles', rockSprites));\r\n\r\n        //What monsters to load\r\n        // this.load.image(\"dragonblue\",dragonB);\r\n        // this.load.image(\"dragonorrange\", dragonO);\r\n    },\r\n    create: function ()\r\n    {\r\n        // create the map\r\n        let map = this.make.tilemap({ key: 'forestmap' });\r\n        \r\n        // Map tilesets; Param1: Name of the tilemap in tiled (found in json); Param2: ame defined in tilemap load\r\n        let landTiles = map.addTilesetImage('d9xkdpm-a3f22a0a-77e9-4aa5-999c-53bab01d0fa4', 'land');\r\n        let greeneryTiles = map.addTilesetImage('rpg_maker__grass__flowers_and_windows_tileset_by_xxjapozeroxx-dbpxkvy', 'greenery');\r\n        let treesOneTiles = map.addTilesetImage('mv_trees_by_schwarzenacht-dazcdmq-1', 'treesone');\r\n        let treesTwoTiles = map.addTilesetImage('pandamaru_mv_nature1_by_schwarzenacht-d9k7n23', 'treestwo');\r\n        let treesThreeTiles = map.addTilesetImage('dapf6nc-562c87b7-1de8-45c2-979f-18e7aa8b98ad', 'treesthree');\r\n        let gravesOneTiles = map.addTilesetImage('d6qnbs4-c4ff2415-2303-4298-98c8-21f24187b9eb', 'gravesone');\r\n        let gravesTwoTiles = map.addTilesetImage('graves-shadow_1', 'gravestwo');\r\n        // console.log(\"Phaser.Cache:: \", Phaser.Cache);\r\n        // console.log(\"map:: \", map);\r\n        \r\n        // creating the layers\r\n        //FLOOR LAYER 1 -- Param1: Name of the layer in JSON Object; Param2: map names used in that layer\r\n        let floor1 = map.createStaticLayer('Tile Layer 3', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let floor2 = map.createStaticLayer('Tile Layer 7', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let floor3 = map.createStaticLayer('Tile Layer 1', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let floor4 = map.createStaticLayer('Tile Layer 4', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let floor5 = map.createStaticLayer('Tile Layer 5', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let floor6 = map.createStaticLayer('Tile Layer 2', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let floor7 = map.createStaticLayer('Tile Layer 9', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let floor8 = map.createStaticLayer('Tile Layer 6', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let floor9 = map.createStaticLayer('Tile Layer 8', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        let collider = map.createStaticLayer('Obstacles', [\r\n            landTiles, \r\n            greeneryTiles, \r\n            treesOneTiles, \r\n            treesTwoTiles, \r\n            treesThreeTiles, \r\n            gravesOneTiles, \r\n            gravesTwoTiles], 0, 0);\r\n        \r\n        // make all tiles in obstacles collidable\r\n        collider.setCollisionByExclusion([-1]);\r\n        \r\n                                       /*  \r\n        ___________________________¶¶¶¶¶¶\r\n        _______________________¶¶¶¶¶ccee¶¶\r\n        _____________________¶¶¶cccceeaa¶¶\r\n        _________________¶¶¶¶¶cccceeaaa¶¶\r\n        _____________¶¶¶¶¶cccccceeaaaa¶¶\r\n        __¶¶¶¶¶¶¶¶¶¶¶¶cccccceeaaaaaaa¶¶  ~~CHARACTER PROGRAMMING~~ \r\n        ¶¶¶ccccccccccccceeaaaaaaaaaa¶¶               ``\r\n        __¶¶¶aaaaaaaeeceeeeeaaaaaag¶¶                 \\\\\r\n        ____¶¶¶¶¶¶aaaaaaaaeeeeeeag¶¶                  //\r\n        ________¶¶¶¶¶¶¶¶aaaaaaeeegg¶¶            ====//\r\n        _________#######¶¶¶¶¶aaaaggg¶¶          //\r\n        ________###|¯|########¶¶aaaaggg¶¶      //\r\n        ______¶¶###|_|###|¯|#####¶¶¶aagggg¶¶  //\r\n        ____¶¶££#########|_|########¶¶¶¶ggg¶¶//\r\n        __¶¶££¶¶#################£££££¶¶¶¶¶ //\r\n        __¶¶££££££#########££££££££¶¶£¶¶   //\r\n        __¶¶¶¶££££££££££££¶¶¶¶¶¶£££££¶¶   //\r\n        _¶§xxx¶¶££££££¶¶¶¶££££££££££££¶¶ //\r\n        _¶§xxx¶¶££££¶¶¶¶¶¶££££££££££££¶¶//\r\n        __¶¶¶¶££££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££¶¶¶¶¶¶££££££££££¶¶\r\n        __¶¶£££¶¶£££££££££¶¶££££££££¶¶\r\n        __¶¶££££¶¶¶£££££££¶¶££££££££¶¶\r\n        _¶¶£££££££¶¶¶¶¶¶££££¶¶££££¶¶££¶¶\r\n        ¶¶££££££££££££££££££££¶¶¶¶££££££¶¶\r\n        _¶¶¶¶¶.__|¶¶¶¶¶¶¶¶¶¶¶¶¶____¶¶¶¶¶¶¶\r\n                             ===*/\r\n\r\n        // animation with key 'left', we don't need left and right as we will use one and flip the sprite\r\n        this.anims.create({\r\n            key: 'left',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        \r\n        // animation with key 'right'\r\n        this.anims.create({\r\n            key: 'right',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'up',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [2, 8, 2, 14]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'down',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [ 0, 6, 0, 12 ] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });        \r\n\r\n        // our player sprite created through the physics system (params measured in pixels)\r\n        this.player = this.physics.add.sprite(550, 680, 'player', 15);\r\n        \r\n        // don't go out of the map\r\n        this.physics.world.bounds.width = map.widthInPixels;\r\n        this.physics.world.bounds.height = map.heightInPixels;\r\n        this.player.setCollideWorldBounds(true);\r\n        \r\n        // don't walk on colliders\r\n        this.physics.add.collider(this.player, collider);\r\n\r\n        // limit camera to map\r\n        this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\r\n        this.cameras.main.startFollow(this.player);\r\n        this.cameras.main.roundPixels = true; // avoid tile bleed\r\n    \r\n        // user input\r\n        this.cursors = this.input.keyboard.createCursorKeys();\r\n        \r\n        // where the enemies will be ~~ SOMEWHAT RANDOMIZED; DOESN'T CHANGE\r\n        this.spawns = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        for(let i = 0; i < 30; i++) {\r\n            let x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n            let y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n            // parameters are x, y, width, height\r\n            this.spawns.create(x, y, 20, 20);            \r\n        }        \r\n        // add colliders\r\n        this.physics.add.overlap(this.player, this.spawns, this.onMeetEnemy, false, this);\r\n    },\r\n    onMeetEnemy: function(player, zone) {        \r\n        // we move the zone to some other location\r\n        zone.x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n        zone.y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n        \r\n        // shake the world\r\n        this.cameras.main.shake(300);\r\n        \r\n        //[[[  VIP :: CHANGE SO BATTLES ARE RANDOM!!! ]]]\r\n        // start battle \r\n        //PUT LUKE'S BATTLE CODE HERE\r\n        //&& CHANGE THE STATE TO BATTLE; SHOW THE BATTLE SCREEN \r\n        this.input.stopPropagation();\r\n        // start battle \r\n        this.scene.switch('BattleScene'); \r\n    },\r\n    update: function (time, delta)\r\n    {\r\n        //console.log(delta);\r\n        // this.controls.update(delta);\r\n    \r\n        this.player.body.setVelocity(0);\r\n        // Horizontal movement\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.body.setVelocityX(-80);\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.body.setVelocityX(80);\r\n        }\r\n\r\n        // Vertical movement\r\n        if (this.cursors.up.isDown)\r\n        {\r\n            this.player.body.setVelocityY(-80);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.body.setVelocityY(80);\r\n        }        \r\n\r\n        // Update the animation last and give left/right animations precedence over up/down animations\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.anims.play('left', true);\r\n            this.player.flipX = true;\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.anims.play('right', true);\r\n            this.player.flipX = false;\r\n        }\r\n        else if (this.cursors.up.isDown)\r\n        {\r\n            this.player.anims.play('up', true);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.anims.play('down', true);\r\n        }\r\n        else\r\n        {\r\n            this.player.anims.stop();\r\n        }\r\n    }\r\n    \r\n});\r\n\r\nexport default ForestScene;","//Phaser Dependencies\r\nimport Phaser from \"phaser\";\r\n\r\n//Tile Dependencies\r\nimport loDefCave from '../assets/cave/tilesheets/All.png';\r\nimport caveRunner from '../assets/cave/tilesheets/cave_tileset.png';\r\nimport hiDefCave from '../assets/cave/tilesheets/cave2.png';\r\nimport crystals from '../assets/cave/tilesheets/crystals.png';\r\nimport loDefFloor from '../assets/cave/tilesheets/TileA5.png';\r\nimport water from '../assets/cave/tilesheets/wateranimate2.png';\r\n//console.log(\"tileMap:: \", tileMap);\r\n\r\nlet CaveScene = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n    initialize:\r\n    function CaveScene ()\r\n    {\r\n        Phaser.Scene.call(this, { key: 'CaveScene' });\r\n    },\r\n    preload: function ()\r\n    {\r\n/*                                                ******* _\r\n                                                *---******* *\r\n                                ~             *-----*******  *\r\n                         ~         ~         *-------*******  }\r\n                        __      _   _!__     *-------*******   }\r\n                   _   /  \\_  _/ \\  |::| ___ **-----********  *    ~\r\n                 _/ \\_/^    \\/   ^\\/|::|\\|:|  **---**** /^\\_ *      ~\r\n     ~        /\\/  ^ /  ^    / ^ ___|::|_|:|_/\\_***** /  ^  \\\r\n      `'     /  \\  _/ ^ ^   /    |::|--|:|---|  \\__/  ^      ^\\___\r\n           _/_^  \\/  ^    _/ ^   |::|::|:|-::| ^ /_  ^    ^    ^   \\_\r\n          /   \\^ /    /\\ /       |::|--|:|:--|  /  \\        ^         \\\r\n         /     \\/    /  /        |::|::|:|:-:| / ^  \\  ^      ^        \\\r\n   _Q   / _Q  _Q_Q  / _Q    _Q   |::|::|:|:::|/    ^ \\    _Q ~      ^     _.~\r\n  /_\\)   /_\\)/_/\\\\)  /_\\)  /_\\)  |::|::|:|:::|           /_\\)           /  \\     \r\n_O|/O___O|/O_OO|/O__O|/O__O|/O__________________________O|/O___________[ O ]\r\n/*////////////////////////////[MAP PROGRAMMING]////////////////////////////*/\r\n\r\n\r\n        // map in json format\r\n        this.load.tilemapTiledJSON('cavemap', \"caveTileMap\");\r\n        // Load the tile maps & give them identifiers\r\n        this.load.image('lowDefCave', loDefCave);\r\n        this.load.image('lowDefFloor', loDefFloor);\r\n        this.load.image('highDefCave', hiDefCave);\r\n        this.load.image('crystals', crystals);\r\n        this.load.image('caveRunner', caveRunner);\r\n        this.load.image('water', water);\r\n        //console.log(\"this.load.image('tiles', rockSprites):: \",this.load.image('tiles', rockSprites));\r\n\r\n        //What monsters to load\r\n        // this.load.image(\"dragonblue\",dragonB);\r\n        // this.load.image(\"dragonorrange\", dragonO);\r\n    },\r\n    create: function ()\r\n    {\r\n        // create the map\r\n        let map = this.make.tilemap({ key: 'cavemap' });\r\n        \r\n        // Map tilesets; Param1: Name of the tilemap in tiled (found in json); Param2: are defined in tilemap load\r\n        let lowDefCaveTiles = map.addTilesetImage('Preston', 'lowDefCave');\r\n        let lowDefFloorTiles = map.addTilesetImage('TileA5', 'lowDefFloor');\r\n        let highDefCaveTiles = map.addTilesetImage('cave2', 'highDefCave');\r\n        let crystalsTiles = map.addTilesetImage('crystals', 'crystals');\r\n        let caveRunnerTiles = map.addTilesetImage('cave_tileset', 'caveRunner');\r\n        let waterTiles = map.addTilesetImage('wateranimate2', 'water');\r\n        // console.log(\"Phaser.Cache:: \", Phaser.Cache);\r\n        // console.log(\"map:: \", map);\r\n        \r\n        // creating the layers\r\n        //FLOOR LAYER 1 -- Param1: Name of the layer in JSON Object; Param2: map names used in that layer\r\n        let floor1 = map.createStaticLayer('Tile Layer 1', [\r\n            lowDefCaveTiles, \r\n            lowDefFloorTiles, \r\n            highDefCaveTiles, \r\n            crystalsTiles, \r\n            caveRunnerTiles, \r\n            waterTiles], 0, 0);\r\n        let floor2 = map.createStaticLayer('Tile Layer 2', [\r\n            lowDefCaveTiles, \r\n            lowDefFloorTiles, \r\n            highDefCaveTiles, \r\n            crystalsTiles, \r\n            caveRunnerTiles, \r\n            waterTiles], 0, 0);\r\n        let floor3 = map.createStaticLayer('Tile Layer 3', [\r\n            lowDefCaveTiles, \r\n            lowDefFloorTiles, \r\n            highDefCaveTiles, \r\n            crystalsTiles, \r\n            caveRunnerTiles, \r\n            waterTiles], 0, 0);\r\n        let floor4 = map.createStaticLayer('Tile Layer 4', [\r\n            lowDefCaveTiles, \r\n            lowDefFloorTiles, \r\n            highDefCaveTiles, \r\n            crystalsTiles, \r\n            caveRunnerTiles, \r\n            waterTiles], 0, 0);\r\n        //OVERTILE\r\n        let overtile = map.createStaticLayer('Overtile', [\r\n            lowDefCaveTiles, \r\n            lowDefFloorTiles, \r\n            highDefCaveTiles, \r\n            crystalsTiles, \r\n            caveRunnerTiles, \r\n            waterTiles], 0, 0);\r\n       //OBSTACLES\r\n        let collider = map.createStaticLayer('Obstacles', [\r\n            lowDefCaveTiles, \r\n            lowDefFloorTiles, \r\n            highDefCaveTiles, \r\n            crystalsTiles, \r\n            caveRunnerTiles, \r\n            waterTiles], 0, 0);\r\n        \r\n        // make all tiles in obstacles collidable\r\n        collider.setCollisionByExclusion([-1]);\r\n        overtile.setDepth(1);\r\n        \r\n                                       /*  \r\n        ___________________________¶¶¶¶¶¶\r\n        _______________________¶¶¶¶¶ccee¶¶\r\n        _____________________¶¶¶cccceeaa¶¶\r\n        _________________¶¶¶¶¶cccceeaaa¶¶\r\n        _____________¶¶¶¶¶cccccceeaaaa¶¶\r\n        __¶¶¶¶¶¶¶¶¶¶¶¶cccccceeaaaaaaa¶¶  ~~CHARACTER PROGRAMMING~~ \r\n        ¶¶¶ccccccccccccceeaaaaaaaaaa¶¶               ``\r\n        __¶¶¶aaaaaaaeeceeeeeaaaaaag¶¶                 \\\\\r\n        ____¶¶¶¶¶¶aaaaaaaaeeeeeeag¶¶                  //\r\n        ________¶¶¶¶¶¶¶¶aaaaaaeeegg¶¶            ====//\r\n        _________#######¶¶¶¶¶aaaaggg¶¶          //\r\n        ________###|¯|########¶¶aaaaggg¶¶      //\r\n        ______¶¶###|_|###|¯|#####¶¶¶aagggg¶¶  //\r\n        ____¶¶££#########|_|########¶¶¶¶ggg¶¶//\r\n        __¶¶££¶¶#################£££££¶¶¶¶¶ //\r\n        __¶¶££££££#########££££££££¶¶£¶¶   //\r\n        __¶¶¶¶££££££££££££¶¶¶¶¶¶£££££¶¶   //\r\n        _¶§xxx¶¶££££££¶¶¶¶££££££££££££¶¶ //\r\n        _¶§xxx¶¶££££¶¶¶¶¶¶££££££££££££¶¶//\r\n        __¶¶¶¶££££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££¶¶¶¶¶¶££££££££££¶¶\r\n        __¶¶£££¶¶£££££££££¶¶££££££££¶¶\r\n        __¶¶££££¶¶¶£££££££¶¶££££££££¶¶\r\n        _¶¶£££££££¶¶¶¶¶¶££££¶¶££££¶¶££¶¶\r\n        ¶¶££££££££££££££££££££¶¶¶¶££££££¶¶\r\n        _¶¶¶¶¶.__|¶¶¶¶¶¶¶¶¶¶¶¶¶____¶¶¶¶¶¶¶\r\n                             ===*/\r\n\r\n        // animation with key 'left', we don't need left and right as we will use one and flip the sprite\r\n        this.anims.create({\r\n            key: 'left',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        \r\n        // animation with key 'right'\r\n        this.anims.create({\r\n            key: 'right',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'up',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [2, 8, 2, 14]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'down',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [ 0, 6, 0, 12 ] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });        \r\n\r\n        // our player sprite created through the physics system (params measured in pixels)\r\n        this.player = this.physics.add.sprite(180, 220, 'player', 15);\r\n        \r\n        // don't go out of the map\r\n        this.physics.world.bounds.width = map.widthInPixels;\r\n        this.physics.world.bounds.height = map.heightInPixels;\r\n        this.player.setCollideWorldBounds(true);\r\n        \r\n        // don't walk on colliders\r\n        this.physics.add.collider(this.player, collider);\r\n\r\n        // limit camera to map\r\n        this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\r\n        this.cameras.main.startFollow(this.player);\r\n        this.cameras.main.roundPixels = true; // avoid tile bleed\r\n    \r\n        // user input\r\n        this.cursors = this.input.keyboard.createCursorKeys();\r\n        \r\n        // where the enemies will be ~~ SOMEWHAT RANDOMIZED; DOESN'T CHANGE\r\n        this.spawns = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        for(let i = 0; i < 30; i++) {\r\n            let x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n            let y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n            // parameters are x, y, width, height\r\n            this.spawns.create(x, y, 20, 20);            \r\n        }        \r\n        // add colliders\r\n        this.physics.add.overlap(this.player, this.spawns, this.onMeetEnemy, false, this);\r\n    },\r\n    onMeetEnemy: function(player, zone) {        \r\n        // we move the zone to some other location\r\n        zone.x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n        zone.y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n        \r\n        // shake the world\r\n        this.cameras.main.shake(300);\r\n        \r\n        //[[[  VIP :: CHANGE SO BATTLES ARE RANDOM!!! ]]]\r\n        // start battle \r\n        //PUT LUKE'S BATTLE CODE HERE\r\n        //&& CHANGE THE STATE TO BATTLE; SHOW THE BATTLE SCREEN \r\n        this.input.stopPropagation();\r\n        // start battle \r\n        this.scene.switch('BattleScene'); \r\n    },\r\n    update: function (time, delta)\r\n    {\r\n        //console.log(delta);\r\n        // this.controls.update(delta);\r\n    \r\n        this.player.body.setVelocity(0);\r\n        // Horizontal movement\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.body.setVelocityX(-80);\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.body.setVelocityX(80);\r\n        }\r\n\r\n        // Vertical movement\r\n        if (this.cursors.up.isDown)\r\n        {\r\n            this.player.body.setVelocityY(-80);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.body.setVelocityY(80);\r\n        }        \r\n\r\n        // Update the animation last and give left/right animations precedence over up/down animations\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.anims.play('left', true);\r\n            this.player.flipX = true;\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.anims.play('right', true);\r\n            this.player.flipX = false;\r\n        }\r\n        else if (this.cursors.up.isDown)\r\n        {\r\n            this.player.anims.play('up', true);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.anims.play('down', true);\r\n        }\r\n        else\r\n        {\r\n            this.player.anims.stop();\r\n        }\r\n    }\r\n    \r\n});\r\n\r\nexport default CaveScene;","//Phaser Dependency\r\nimport Phaser from \"phaser\";\r\n\r\n//Tile dependencies\r\nimport bldgOne from '../assets/city/tilesheets/bldg.png';\r\nimport bldgTwo from '../assets/city/tilesheets/CyberTileA4.png';\r\nimport bldgThree from '../assets/city/tilesheets/industrial.png';\r\nimport bldgFour from '../assets/city/tilesheets/carsetc.png';\r\nimport bldgFive from '../assets/city/tilesheets/signs.png';\r\nimport militaryBldgs from '../assets/city/tilesheets/JGSDF_garage.png';\r\nimport slums from '../assets/city/tilesheets/Houses_Slum.png';\r\nimport dump from '../assets/city/tilesheets/wreckage.png';\r\nimport bike from '../assets/city/tilesheets/bike.png';\r\nimport grime from '../assets/city/tilesheets/blood_wall02.png';\r\nimport chars from '../assets/city/tilesheets/chars_city.png';\r\n//console.log(\"tileMap:: \", tileMap);\r\n\r\nlet CityScene = new Phaser.Class({\r\n\r\n    Extends: Phaser.Scene,\r\n    initialize:\r\n    function CityScene ()\r\n    {\r\n        Phaser.Scene.call(this, { key: 'CityScene' });\r\n    },\r\n    preload: function ()\r\n    {\r\n      \r\n/*                                                ******* _\r\n                                                *---******* *\r\n                                ~             *-----*******  *\r\n                         ~         ~         *-------*******  }\r\n                        __      _   _!__     *-------*******   }\r\n                   _   /  \\_  _/ \\  |::| ___ **-----********  *    ~\r\n                 _/ \\_/^    \\/   ^\\/|::|\\|:|  **---**** /^\\_ *      ~\r\n     ~        /\\/  ^ /  ^    / ^ ___|::|_|:|_/\\_***** /  ^  \\\r\n      `'     /  \\  _/ ^ ^   /    |::|--|:|---|  \\__/  ^      ^\\___\r\n           _/_^  \\/  ^    _/ ^   |::|::|:|-::| ^ /_  ^    ^    ^   \\_\r\n          /   \\^ /    /\\ /       |::|--|:|:--|  /  \\        ^         \\\r\n         /     \\/    /  /        |::|::|:|:-:| / ^  \\  ^      ^        \\\r\n   _Q   / _Q  _Q_Q  / _Q    _Q   |::|::|:|:::|/    ^ \\    _Q ~      ^     _.~\r\n  /_\\)   /_\\)/_/\\\\)  /_\\)  /_\\)  |::|::|:|:::|           /_\\)           /  \\     \r\n_O|/O___O|/O_OO|/O__O|/O__O|/O__________________________O|/O___________[ O ]\r\n/*////////////////////////////[MAP PROGRAMMING]////////////////////////////*/\r\n\r\n\r\n        // map in json format\r\n        this.load.tilemapTiledJSON('citymap', \"cityTileMap\");\r\n        // Load the tile maps & give them identifiers\r\n        this.load.image('bldgOne', bldgOne);\r\n        this.load.image('bldgTwo', bldgTwo);\r\n        this.load.image('bldgThree', bldgThree);\r\n        this.load.image('bldgFour', bldgFour);\r\n        this.load.image('bldgFive', bldgFive);\r\n        this.load.image('militaryBldgs', militaryBldgs);\r\n        this.load.image('slums', slums);\r\n        this.load.image('dump', dump);\r\n        this.load.image('bike', bike);\r\n        this.load.image('grime', grime);\r\n        this.load.image('chars', chars);\r\n        //console.log(\"this.load.image('tiles', rockSprites):: \",this.load.image('tiles', rockSprites));\r\n\r\n        //What monsters to load\r\n        // this.load.image(\"dragonblue\",dragonB);\r\n        // this.load.image(\"dragonorrange\", dragonO);\r\n    },\r\n    create: function ()\r\n    {\r\n        // create the map\r\n        let map = this.make.tilemap({ key: 'citymap' });\r\n        \r\n        // Map tilesets; Param1: Name of the tilemap in tiled (found in json); Param2: are defined in tilemap load\r\n        let bldgOneTiles = map.addTilesetImage('bldg', 'bldgOne');\r\n        let bldgTwoTiles = map.addTilesetImage('CyberTileA4', 'bldgTwo');\r\n        let bldgThreeTiles = map.addTilesetImage('industrial', 'bldgThree');\r\n        let bldgFourTiles = map.addTilesetImage('carsetc', 'bldgFour');\r\n        let bldgFiveTiles = map.addTilesetImage('signs', 'bldgFive');\r\n        let militaryBldgsTiles = map.addTilesetImage('JGSDF_garage', 'militaryBldgs');\r\n        let slumsTiles = map.addTilesetImage('Slum', 'slums');\r\n        let dumpTiles = map.addTilesetImage('wreckage', 'dump');\r\n        let bikeTiles = map.addTilesetImage('bike', 'bike');\r\n        let grimeTiles = map.addTilesetImage('blood_wall02', 'grime');\r\n        let charsTiles = map.addTilesetImage('chars_city', 'chars');\r\n        // console.log(\"Phaser.Cache:: \", Phaser.Cache);\r\n        // console.log(\"map:: \", map);\r\n        \r\n        // creating the layers\r\n        //FLOOR LAYER 1 -- Param1: Name of the layer in JSON Object; Param2: map names used in that layer\r\n        let floor1 = map.createStaticLayer('Tile Layer 1', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor1pt5 = map.createStaticLayer('Tile Layer 1.5', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor10 = map.createStaticLayer('Tile Layer 10', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor11 = map.createStaticLayer('Tile Layer 11', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor12 = map.createStaticLayer('Tile Layer 12', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor2 = map.createStaticLayer('Tile Layer 2', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor3 = map.createStaticLayer('Tile Layer 3', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor4 = map.createStaticLayer('Tile Layer 4', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor6 = map.createStaticLayer('Tile Layer 6', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor7 = map.createStaticLayer('Tile Layer 7', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor8 = map.createStaticLayer('Tile Layer 8', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let floor9 = map.createStaticLayer('Tile Layer 9', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        //OVERTILE\r\n        let overtile = map.createStaticLayer('Overtile', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        let overtileTwo = map.createStaticLayer('Overtile2', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n       //OBSTACLES\r\n        let collider = map.createStaticLayer('Obstacles', [\r\n            bldgOneTiles, \r\n            bldgTwoTiles, \r\n            bldgThreeTiles, \r\n            bldgFourTiles, \r\n            bldgFiveTiles, \r\n            militaryBldgsTiles, \r\n            slumsTiles, \r\n            dumpTiles, \r\n            bikeTiles, \r\n            grimeTiles, \r\n            charsTiles], 0, 0);\r\n        \r\n        // make all tiles in obstacles collidable\r\n        collider.setCollisionByExclusion([-1]);\r\n        overtile.setDepth(1);\r\n        overtileTwo.setDepth(1);\r\n        \r\n                                       /*  \r\n        ___________________________¶¶¶¶¶¶\r\n        _______________________¶¶¶¶¶ccee¶¶\r\n        _____________________¶¶¶cccceeaa¶¶\r\n        _________________¶¶¶¶¶cccceeaaa¶¶\r\n        _____________¶¶¶¶¶cccccceeaaaa¶¶\r\n        __¶¶¶¶¶¶¶¶¶¶¶¶cccccceeaaaaaaa¶¶  ~~CHARACTER PROGRAMMING~~ \r\n        ¶¶¶ccccccccccccceeaaaaaaaaaa¶¶               ``\r\n        __¶¶¶aaaaaaaeeceeeeeaaaaaag¶¶                 \\\\\r\n        ____¶¶¶¶¶¶aaaaaaaaeeeeeeag¶¶                  //\r\n        ________¶¶¶¶¶¶¶¶aaaaaaeeegg¶¶            ====//\r\n        _________#######¶¶¶¶¶aaaaggg¶¶          //\r\n        ________###|¯|########¶¶aaaaggg¶¶      //\r\n        ______¶¶###|_|###|¯|#####¶¶¶aagggg¶¶  //\r\n        ____¶¶££#########|_|########¶¶¶¶ggg¶¶//\r\n        __¶¶££¶¶#################£££££¶¶¶¶¶ //\r\n        __¶¶££££££#########££££££££¶¶£¶¶   //\r\n        __¶¶¶¶££££££££££££¶¶¶¶¶¶£££££¶¶   //\r\n        _¶§xxx¶¶££££££¶¶¶¶££££££££££££¶¶ //\r\n        _¶§xxx¶¶££££¶¶¶¶¶¶££££££££££££¶¶//\r\n        __¶¶¶¶££££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££§xxx¶¶££££££££££££¶¶\r\n        __¶¶££¶¶££££¶¶¶¶¶¶££££££££££¶¶\r\n        __¶¶£££¶¶£££££££££¶¶££££££££¶¶\r\n        __¶¶££££¶¶¶£££££££¶¶££££££££¶¶\r\n        _¶¶£££££££¶¶¶¶¶¶££££¶¶££££¶¶££¶¶\r\n        ¶¶££££££££££££££££££££¶¶¶¶££££££¶¶\r\n        _¶¶¶¶¶.__|¶¶¶¶¶¶¶¶¶¶¶¶¶____¶¶¶¶¶¶¶\r\n                             ===*/\r\n\r\n        // animation with key 'left', we don't need left and right as we will use one and flip the sprite\r\n        this.anims.create({\r\n            key: 'left',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        \r\n        // animation with key 'right'\r\n        this.anims.create({\r\n            key: 'right',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [1, 7, 1, 13] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'up',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [2, 8, 2, 14]}),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });\r\n        this.anims.create({\r\n            key: 'down',\r\n            frames: this.anims.generateFrameNumbers('player', { frames: [ 0, 6, 0, 12 ] }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n        });        \r\n\r\n        // our player sprite created through the physics system (params measured in pixels)\r\n        this.player = this.physics.add.sprite(180, 220, 'player', 15);\r\n        \r\n        // don't go out of the map\r\n        this.physics.world.bounds.width = map.widthInPixels;\r\n        this.physics.world.bounds.height = map.heightInPixels;\r\n        this.player.setCollideWorldBounds(true);\r\n        \r\n        // don't walk on colliders\r\n        this.physics.add.collider(this.player, collider);\r\n\r\n        // limit camera to map\r\n        this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\r\n        this.cameras.main.startFollow(this.player);\r\n        this.cameras.main.roundPixels = true; // avoid tile bleed\r\n    \r\n        // user input\r\n        this.cursors = this.input.keyboard.createCursorKeys();\r\n        \r\n        // where the enemies will be ~~ SOMEWHAT RANDOMIZED; DOESN'T CHANGE\r\n        this.spawns = this.physics.add.group({ classType: Phaser.GameObjects.Zone });\r\n        for(let i = 0; i < 30; i++) {\r\n            let x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n            let y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n            // parameters are x, y, width, height\r\n            this.spawns.create(x, y, 20, 20);            \r\n        }        \r\n        // add colliders\r\n        this.physics.add.overlap(this.player, this.spawns, this.onMeetEnemy, false, this);\r\n    },\r\n    onMeetEnemy: function(player, zone) {        \r\n        // we move the zone to some other location\r\n        zone.x = Phaser.Math.RND.between(0, this.physics.world.bounds.width);\r\n        zone.y = Phaser.Math.RND.between(0, this.physics.world.bounds.height);\r\n        \r\n        // shake the world\r\n        this.cameras.main.shake(300);\r\n        \r\n        //[[[  VIP :: CHANGE SO BATTLES ARE RANDOM!!! ]]]\r\n        // start battle \r\n        //PUT LUKE'S BATTLE CODE HERE\r\n        //&& CHANGE THE STATE TO BATTLE; SHOW THE BATTLE SCREEN \r\n        this.input.stopPropagation();\r\n        // start battle \r\n        this.scene.switch('BattleScene'); \r\n    },\r\n    update: function (time, delta)\r\n    {\r\n        //console.log(delta);\r\n        // this.controls.update(delta);\r\n    \r\n        this.player.body.setVelocity(0);\r\n        // Horizontal movement\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.body.setVelocityX(-80);\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.body.setVelocityX(80);\r\n        }\r\n\r\n        // Vertical movement\r\n        if (this.cursors.up.isDown)\r\n        {\r\n            this.player.body.setVelocityY(-80);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.body.setVelocityY(80);\r\n        }        \r\n\r\n        // Update the animation last and give left/right animations precedence over up/down animations\r\n        if (this.cursors.left.isDown)\r\n        {\r\n            this.player.anims.play('left', true);\r\n            this.player.flipX = true;\r\n        }\r\n        else if (this.cursors.right.isDown)\r\n        {\r\n            this.player.anims.play('right', true);\r\n            this.player.flipX = false;\r\n        }\r\n        else if (this.cursors.up.isDown)\r\n        {\r\n            this.player.anims.play('up', true);\r\n        }\r\n        else if (this.cursors.down.isDown)\r\n        {\r\n            this.player.anims.play('down', true);\r\n        }\r\n        else\r\n        {\r\n            this.player.anims.stop();\r\n        }\r\n    }\r\n    \r\n});\r\n\r\nexport default CityScene;","import React, {Component} from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Phaser from \"phaser\";\r\nimport { IonPhaser } from '@ion-phaser/react'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { Navbar } from 'react-bootstrap';\r\nimport Footer from './components/Footer/footer';\r\n// import Menu from './components/Menu/menu.js';\r\n// import { SecureRoute, Security, LoginCallback } from '@okta/okta-react';\r\n// import Home from './Home';\r\nimport LoginPage from './components/auth/LoginPage';\r\nimport SaveMenu from './components/Save/SaveMenu';\r\n\r\n//Importing Scenes\r\nimport BootScene from \"./phaser/boot\";\r\nimport BattleScene from \"./phaser/battle\";\r\nimport UIScene from \"./phaser/ui\";\r\n//Map Scenes\r\nimport WorldScene from \"./phaser/worldmap\";\r\nimport DesertScene from \"./phaser/desert\";\r\nimport ForestScene from \"./phaser/forest\";\r\nimport CaveScene from \"./phaser/cave\";\r\nimport CityScene from \"./phaser/city\";\r\n\r\n//Door Modal Scene\r\nimport DoorModal from \"./phaser/prefabs/doormodal\";\r\n\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super(props)  \r\n    this.state = {\r\n      player:{},\r\n      initialize: true,\r\n      game: {\r\n        type: Phaser.AUTO,\r\n        width: 750,\r\n        height: 600,\r\n        zoom: 1,\r\n        physics: {\r\n            default: 'arcade',\r\n            arcade: {\r\n                gravity: { y: 0 },\r\n                debug: false // set to true to view zones\r\n            }\r\n        },\r\n        scene: [\r\n          BootScene, \r\n          WorldScene,\r\n          DesertScene,\r\n          ForestScene,\r\n          CaveScene,\r\n          CityScene,\r\n          BattleScene,\r\n          UIScene,\r\n          DoorModal\r\n        ]\r\n      }\r\n    }\r\n    this.handler = this.handler.bind(this)\r\n  }\r\n\r\n  handler(playerObj) {\r\n    this.setState({\r\n      player: playerObj\r\n    })\r\n  }\r\n\r\n  render(){\r\n    console.log(\"MAIN GAME STATE:: \", this.state);\r\n    const { initialize, game } = this.state\r\n    return (\r\n      <>\r\n         {/* <Security issuer='https://dev-243399.okta.com/oauth2/default'\r\n                    clientId='0oa33m68qMWbxYgrm4x6'\r\n                    redirectUri={window.location.origin + '/implicit/callback'} >\r\n            <Route path='/' exact={true} component={Home}/>\r\n            <SecureRoute path='/protected' component={Menu}/>\r\n            <Route path='/implicit/callback' component={LoginCallback} />\r\n          </Security> */}\r\n        <div>\r\n          <div>\r\n              <Navbar bg=\"dark\" variant=\"dark\">\r\n                  <Navbar.Brand href=\"#home\">Tamagotchi simulator</Navbar.Brand>\r\n                  <ul><LoginPage path=\"/login\" component={LoginPage} handler = {this.handler}/></ul>\r\n              </Navbar>\r\n          </div>\r\n          \r\n         \r\n            {/* <Save/> */}\r\n          </div>\r\n          <SaveMenu />\r\n          <div id=\"phaser-box\">\r\n            <IonPhaser game={game} initialize={initialize} />\r\n          </div>\r\n          <Footer />\r\n      </> \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","//React dependency\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\n//Render the DOM\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/RPG_assets.10505bdd.png\";","module.exports = __webpack_public_path__ + \"static/media/AutomatonBase.1186b996.png\";","module.exports = __webpack_public_path__ + \"static/media/ToxicRoot.1f767c3f.png\";","module.exports = __webpack_public_path__ + \"static/media/desert.a53f5bc5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/castle4.e6749b15.png\";","module.exports = __webpack_public_path__ + \"static/media/Dungeon_A532.679e645c.png\";","module.exports = __webpack_public_path__ + \"static/media/wateranimate2.b73038f9.png\";","module.exports = __webpack_public_path__ + \"static/media/Forest.533e1bb0.png\";","module.exports = __webpack_public_path__ + \"static/media/nature2.0be0cf54.png\";","module.exports = __webpack_public_path__ + \"static/media/World_C32.8c2ff35b.png\";","module.exports = __webpack_public_path__ + \"static/media/WorldIcons.2165fb53.png\";","module.exports = __webpack_public_path__ + \"static/media/buttonsyes.92eb6d12.png\";","module.exports = __webpack_public_path__ + \"static/media/buttonsno.af118e91.png\";","module.exports = __webpack_public_path__ + \"static/media/rocks.8194638a.png\";","module.exports = __webpack_public_path__ + \"static/media/Outside_A2.39b194d8.png\";","module.exports = __webpack_public_path__ + \"static/media/red_cave.56096504.png\";","module.exports = __webpack_public_path__ + \"static/media/planks.6385506a.png\";","module.exports = __webpack_public_path__ + \"static/media/miscshop_bridge.01ae87ee.png\";","module.exports = __webpack_public_path__ + \"static/media/bones.891668fd.png\";","module.exports = __webpack_public_path__ + \"static/media/sekihi01.3f90182c.png\";","module.exports = __webpack_public_path__ + \"static/media/d6qnbs4-c4ff2415-2303-4298-98c8-21f24187b9eb.4ddcc360.png\";","module.exports = __webpack_public_path__ + \"static/media/d9xkdpm-a3f22a0a-77e9-4aa5-999c-53bab01d0fa4.af23750c.png\";","module.exports = __webpack_public_path__ + \"static/media/dapf6nc-562c87b7-1de8-45c2-979f-18e7aa8b98ad.3b3b2faf.png\";","module.exports = __webpack_public_path__ + \"static/media/graves-shadow_1.80a50786.png\";","module.exports = __webpack_public_path__ + \"static/media/mv_trees_by_schwarzenacht-dazcdmq-1.6573e92e.png\";","module.exports = __webpack_public_path__ + \"static/media/pandamaru_mv_nature1_by_schwarzenacht-d9k7n23.9dfea887.png\";","module.exports = __webpack_public_path__ + \"static/media/rpg_maker__grass__flowers_and_windows_tileset_by_xxjapozeroxx-dbpxkvy.8138767c.png\";","module.exports = __webpack_public_path__ + \"static/media/All.72981c15.png\";","module.exports = __webpack_public_path__ + \"static/media/cave_tileset.4cd409f4.png\";","module.exports = __webpack_public_path__ + \"static/media/cave2.ce5d9414.png\";","module.exports = __webpack_public_path__ + \"static/media/crystals.9d67a21f.png\";","module.exports = __webpack_public_path__ + \"static/media/TileA5.6169bea4.png\";","module.exports = __webpack_public_path__ + \"static/media/wateranimate2.b73038f9.png\";","module.exports = __webpack_public_path__ + \"static/media/bldg.ca25a47c.png\";","module.exports = __webpack_public_path__ + \"static/media/CyberTileA4.33f9e092.png\";","module.exports = __webpack_public_path__ + \"static/media/industrial.c2cb943f.png\";","module.exports = __webpack_public_path__ + \"static/media/carsetc.55729f26.png\";","module.exports = __webpack_public_path__ + \"static/media/signs.bac728b8.png\";","module.exports = __webpack_public_path__ + \"static/media/JGSDF_garage.d71974a8.png\";","module.exports = __webpack_public_path__ + \"static/media/Houses_Slum.f588de88.png\";","module.exports = __webpack_public_path__ + \"static/media/wreckage.a517e3aa.png\";","module.exports = __webpack_public_path__ + \"static/media/bike.d5d57e73.png\";","module.exports = __webpack_public_path__ + \"static/media/blood_wall02.e504f456.png\";","module.exports = __webpack_public_path__ + \"static/media/chars_city.7c9b3d93.png\";"],"sourceRoot":""}